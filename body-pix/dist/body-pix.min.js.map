{"version":3,"file":"body-pix.min.js","sources":["../src/decode_part_map.ts","../src/base_model.ts","../src/mobilenet.ts","../src/keypoints.ts","../src/multi_person/util.ts","../src/multi_person/decode_multiple_masks_cpu.ts","../src/multi_person/decode_multiple_masks_webgl.ts","../src/multi_person/decode_instance_masks.ts","../src/multi_person/max_heap.ts","../src/multi_person/build_part_with_score_queue.ts","../src/multi_person/decode_pose.ts","../src/multi_person/decode_multiple_poses.ts","../src/resnet.ts","../src/saved_models.ts","../src/util.ts","../src/body_pix_model.ts","../src/output_rendering_util.ts","../src/blur.ts","../src/part_channels.ts","../src/version.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\nimport * as tf from '@tensorflow/tfjs-core';\r\n\r\n/**\r\n * Takes the sigmoid of the part heatmap output and generates a 2d one-hot\r\n * tensor with ones where the part's score has the maximum value.\r\n *\r\n * @param partHeatmapScores\r\n */\r\nfunction toFlattenedOneHotPartMap(partHeatmapScores: tf.Tensor3D): tf.Tensor2D {\r\n  const numParts = partHeatmapScores.shape[2];\r\n  const partMapLocations = partHeatmapScores.argMax(2);\r\n\r\n  const partMapFlattened = partMapLocations.reshape([-1]);\r\n\r\n  return tf.oneHot(partMapFlattened, numParts) as tf.Tensor2D;\r\n}\r\n\r\nfunction clipByMask2d(image: tf.Tensor2D, mask: tf.Tensor2D): tf.Tensor2D {\r\n  return image.mul(mask);\r\n}\r\n\r\n/**\r\n * Takes the sigmoid of the segmentation output, and generates a segmentation\r\n * mask with a 1 or 0 at each pixel where there is a person or not a person. The\r\n * segmentation threshold determines the threshold of a score for a pixel for it\r\n * to be considered part of a person.\r\n * @param segmentScores A 3d-tensor of the sigmoid of the segmentation output.\r\n * @param segmentationThreshold The minimum that segmentation values must have\r\n * to be considered part of the person.  Affects the generation of the\r\n * segmentation mask and the clipping of the colored part image.\r\n *\r\n * @returns A segmentation mask with a 1 or 0 at each pixel where there is a\r\n * person or not a person.\r\n */\r\nexport function toMaskTensor(\r\n    segmentScores: tf.Tensor2D, threshold: number): tf.Tensor2D {\r\n  return tf.tidy(\r\n      () =>\r\n          (segmentScores.greater(tf.scalar(threshold)).toInt() as tf.Tensor2D));\r\n}\r\n\r\n/**\r\n * Takes the sigmoid of the person and part map output, and returns a 2d tensor\r\n * of an image with the corresponding value at each pixel corresponding to the\r\n * part with the highest value. These part ids are clipped by the segmentation\r\n * mask. Wherever the a pixel is clipped by the segmentation mask, its value\r\n * will set to -1, indicating that there is no part in that pixel.\r\n * @param segmentScores A 3d-tensor of the sigmoid of the segmentation output.\r\n * @param partHeatmapScores A 3d-tensor of the sigmoid of the part heatmap\r\n * output. The third dimension corresponds to the part.\r\n *\r\n * @returns A 2d tensor of an image with the corresponding value at each pixel\r\n * corresponding to the part with the highest value. These part ids are clipped\r\n * by the segmentation mask.  It will have values of -1 for pixels that are\r\n * outside of the body and do not have a corresponding part.\r\n */\r\nexport function decodePartSegmentation(\r\n    segmentationMask: tf.Tensor2D,\r\n    partHeatmapScores: tf.Tensor3D): tf.Tensor2D {\r\n  const [partMapHeight, partMapWidth, numParts] = partHeatmapScores.shape;\r\n  return tf.tidy(() => {\r\n    const flattenedMap = toFlattenedOneHotPartMap(partHeatmapScores);\r\n    const partNumbers = tf.range(0, numParts, 1, 'int32').expandDims(1);\r\n\r\n    const partMapFlattened =\r\n        flattenedMap.matMul(partNumbers as tf.Tensor2D).toInt();\r\n\r\n    const partMap = partMapFlattened.reshape([partMapHeight, partMapWidth]);\r\n\r\n    const partMapShiftedUpForClipping = partMap.add(tf.scalar(1, 'int32'));\r\n\r\n    return clipByMask2d(\r\n               partMapShiftedUpForClipping as tf.Tensor2D, segmentationMask)\r\n        .sub(tf.scalar(1, 'int32'));\r\n  });\r\n}\r\n\r\nexport function decodeOnlyPartSegmentation(partHeatmapScores: tf.Tensor3D):\r\n    tf.Tensor2D {\r\n  const [partMapHeight, partMapWidth, numParts] = partHeatmapScores.shape;\r\n  return tf.tidy(() => {\r\n    const flattenedMap = toFlattenedOneHotPartMap(partHeatmapScores);\r\n    const partNumbers = tf.range(0, numParts, 1, 'int32').expandDims(1);\r\n\r\n    const partMapFlattened =\r\n        flattenedMap.matMul(partNumbers as tf.Tensor2D).toInt();\r\n\r\n    return partMapFlattened.reshape([partMapHeight, partMapWidth]);\r\n  });\r\n}\r\n","\r\n/**\r\n * @license\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\nimport * as tfconv from '@tensorflow/tfjs-converter';\r\nimport * as tf from '@tensorflow/tfjs-core';\r\nimport {BodyPixOutputStride} from './types';\r\n\r\n/**\r\n * BodyPix supports using various convolution neural network models\r\n * (e.g. ResNet and MobileNetV1) as its underlying base model.\r\n * The following BaseModel interface defines a unified interface for\r\n * creating such BodyPix base models. Currently both MobileNet (in\r\n * ./mobilenet.ts) and ResNet (in ./resnet.ts) implements the BaseModel\r\n * interface. New base models that conform to the BaseModel interface can be\r\n * added to BodyPix.\r\n */\r\nexport abstract class BaseModel {\r\n  constructor(\r\n      protected readonly model: tfconv.GraphModel,\r\n      public readonly outputStride: BodyPixOutputStride) {\r\n    const inputShape =\r\n        this.model.inputs[0].shape as [number, number, number, number];\r\n    tf.util.assert(\r\n        (inputShape[1] === -1) && (inputShape[2] === -1),\r\n        () => `Input shape [${inputShape[1]}, ${inputShape[2]}] ` +\r\n            `must both be equal to or -1`);\r\n  }\r\n\r\n  abstract preprocessInput(input: tf.Tensor3D): tf.Tensor3D;\r\n\r\n  /**\r\n   * Predicts intermediate Tensor representations.\r\n   *\r\n   * @param input The input RGB image of the base model.\r\n   * A Tensor of shape: [`inputResolution`, `inputResolution`, 3].\r\n   *\r\n   * @return A dictionary of base model's intermediate predictions.\r\n   * The returned dictionary should contains the following elements:\r\n   * - heatmapScores: A Tensor3D that represents the keypoint heatmap scores.\r\n   * - offsets: A Tensor3D that represents the offsets.\r\n   * - displacementFwd: A Tensor3D that represents the forward displacement.\r\n   * - displacementBwd: A Tensor3D that represents the backward displacement.\r\n   * - segmentation: A Tensor3D that represents the segmentation of all\r\n   * people.\r\n   * - longOffsets: A Tensor3D that represents the long offsets used for\r\n   * instance grouping.\r\n   * - partHeatmaps: A Tensor3D that represents the body part segmentation.\r\n   */\r\n  predict(input: tf.Tensor3D): {\r\n    heatmapScores: tf.Tensor3D,\r\n    offsets: tf.Tensor3D,\r\n    displacementFwd: tf.Tensor3D,\r\n    displacementBwd: tf.Tensor3D,\r\n    segmentation: tf.Tensor3D,\r\n    partHeatmaps: tf.Tensor3D,\r\n    longOffsets: tf.Tensor3D,\r\n    partOffsets: tf.Tensor3D\r\n  } {\r\n    return tf.tidy(() => {\r\n      const asFloat = this.preprocessInput(input.toFloat());\r\n      const asBatch = asFloat.expandDims(0);\r\n      const results = this.model.predict(asBatch) as tf.Tensor4D[];\r\n      const results3d: tf.Tensor3D[] = results.map(y => y.squeeze([0]));\r\n      const namedResults = this.nameOutputResults(results3d);\r\n\r\n      return {\r\n        heatmapScores: namedResults.heatmap.sigmoid(),\r\n        offsets: namedResults.offsets,\r\n        displacementFwd: namedResults.displacementFwd,\r\n        displacementBwd: namedResults.displacementBwd,\r\n        segmentation: namedResults.segmentation,\r\n        partHeatmaps: namedResults.partHeatmaps,\r\n        longOffsets: namedResults.longOffsets,\r\n        partOffsets: namedResults.partOffsets\r\n      };\r\n    });\r\n  }\r\n\r\n  // Because MobileNet and ResNet predict() methods output a different order for\r\n  // these values, we have a method that needs to be implemented to order them.\r\n  abstract nameOutputResults(results: tf.Tensor3D[]): {\r\n    heatmap: tf.Tensor3D,\r\n    offsets: tf.Tensor3D,\r\n    displacementFwd: tf.Tensor3D,\r\n    displacementBwd: tf.Tensor3D,\r\n    segmentation: tf.Tensor3D,\r\n    partHeatmaps: tf.Tensor3D,\r\n    longOffsets: tf.Tensor3D,\r\n    partOffsets: tf.Tensor3D\r\n  };\r\n\r\n  /**\r\n   * Releases the CPU and GPU memory allocated by the model.\r\n   */\r\n  dispose() {\r\n    this.model.dispose();\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\nimport * as tf from '@tensorflow/tfjs-core';\r\n\r\nimport {BaseModel} from './base_model';\r\n\r\nexport class MobileNet extends BaseModel {\r\n  preprocessInput(input: tf.Tensor3D): tf.Tensor3D {\r\n    // Normalize the pixels [0, 255] to be between [-1, 1].\r\n    return tf.tidy(() => tf.div(input, 127.5).sub(1.0));\r\n  }\r\n\r\n  nameOutputResults(results: tf.Tensor3D[]) {\r\n    const [\r\n      offsets,\r\n      segmentation,\r\n      partHeatmaps,\r\n      longOffsets,\r\n      heatmap,\r\n      displacementFwd,\r\n      displacementBwd,\r\n      partOffsets,\r\n  ] = results;\r\n    return {\r\n      offsets,\r\n      segmentation,\r\n      partHeatmaps,\r\n      longOffsets,\r\n      heatmap,\r\n      displacementFwd,\r\n      displacementBwd,\r\n      partOffsets\r\n    };\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\nexport type Tuple<T> = [T, T];\r\nexport type StringTuple = Tuple<string>;\r\nexport type NumberTuple = Tuple<number>;\r\n\r\nexport const PART_NAMES = [\r\n  'nose', 'leftEye', 'rightEye', 'leftEar', 'rightEar', 'leftShoulder',\r\n  'rightShoulder', 'leftElbow', 'rightElbow', 'leftWrist', 'rightWrist',\r\n  'leftHip', 'rightHip', 'leftKnee', 'rightKnee', 'leftAnkle', 'rightAnkle'\r\n];\r\n\r\nexport const NUM_KEYPOINTS = PART_NAMES.length;\r\n\r\nexport interface NumberDict {\r\n  [jointName: string]: number;\r\n}\r\n\r\nexport const PART_IDS =\r\n    PART_NAMES.reduce((result: NumberDict, jointName, i): NumberDict => {\r\n      result[jointName] = i;\r\n      return result;\r\n    }, {}) as NumberDict;\r\n\r\nconst CONNECTED_PART_NAMES: StringTuple[] = [\r\n  ['leftHip', 'leftShoulder'], ['leftElbow', 'leftShoulder'],\r\n  ['leftElbow', 'leftWrist'], ['leftHip', 'leftKnee'],\r\n  ['leftKnee', 'leftAnkle'], ['rightHip', 'rightShoulder'],\r\n  ['rightElbow', 'rightShoulder'], ['rightElbow', 'rightWrist'],\r\n  ['rightHip', 'rightKnee'], ['rightKnee', 'rightAnkle'],\r\n  ['leftShoulder', 'rightShoulder'], ['leftHip', 'rightHip']\r\n];\r\n\r\n/*\r\n * Define the skeleton. This defines the parent->child relationships of our\r\n * tree. Arbitrarily this defines the nose as the root of the tree, however\r\n * since we will infer the displacement for both parent->child and\r\n * child->parent, we can define the tree root as any node.\r\n */\r\nexport const POSE_CHAIN: StringTuple[] = [\r\n  ['nose', 'leftEye'], ['leftEye', 'leftEar'], ['nose', 'rightEye'],\r\n  ['rightEye', 'rightEar'], ['nose', 'leftShoulder'],\r\n  ['leftShoulder', 'leftElbow'], ['leftElbow', 'leftWrist'],\r\n  ['leftShoulder', 'leftHip'], ['leftHip', 'leftKnee'],\r\n  ['leftKnee', 'leftAnkle'], ['nose', 'rightShoulder'],\r\n  ['rightShoulder', 'rightElbow'], ['rightElbow', 'rightWrist'],\r\n  ['rightShoulder', 'rightHip'], ['rightHip', 'rightKnee'],\r\n  ['rightKnee', 'rightAnkle']\r\n];\r\n\r\nexport const CONNECTED_PART_INDICES = CONNECTED_PART_NAMES.map(\r\n    ([jointNameA, jointNameB]) =>\r\n        ([PART_IDS[jointNameA], PART_IDS[jointNameB]]));\r\n","/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\nimport {NUM_KEYPOINTS} from '../keypoints';\r\nimport {Padding, Part, TensorBuffer3D, Vector2D} from '../types';\r\n\r\nexport function getScale(\r\n    [height, width]: [number, number],\r\n    [inputResolutionY, inputResolutionX]: [number, number],\r\n    padding: Padding): [number, number] {\r\n  const {top: padT, bottom: padB, left: padL, right: padR} = padding;\r\n  const scaleY = inputResolutionY / (padT + padB + height);\r\n  const scaleX = inputResolutionX / (padL + padR + width);\r\n  return [scaleX, scaleY];\r\n}\r\n\r\nexport function getOffsetPoint(\r\n    y: number, x: number, keypoint: number, offsets: TensorBuffer3D): Vector2D {\r\n  return {\r\n    y: offsets.get(y, x, keypoint),\r\n    x: offsets.get(y, x, keypoint + NUM_KEYPOINTS)\r\n  };\r\n}\r\n\r\nexport function getImageCoords(\r\n    part: Part, outputStride: number, offsets: TensorBuffer3D): Vector2D {\r\n  const {heatmapY, heatmapX, id: keypoint} = part;\r\n  const {y, x} = getOffsetPoint(heatmapY, heatmapX, keypoint, offsets);\r\n  return {\r\n    x: part.heatmapX * outputStride + x,\r\n    y: part.heatmapY * outputStride + y\r\n  };\r\n}\r\n\r\nexport function fillArray<T>(element: T, size: number): T[] {\r\n  const result: T[] = new Array(size);\r\n\r\n  for (let i = 0; i < size; i++) {\r\n    result[i] = element;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport function clamp(a: number, min: number, max: number): number {\r\n  if (a < min) {\r\n    return min;\r\n  }\r\n  if (a > max) {\r\n    return max;\r\n  }\r\n  return a;\r\n}\r\n\r\nexport function squaredDistance(\r\n    y1: number, x1: number, y2: number, x2: number): number {\r\n  const dy = y2 - y1;\r\n  const dx = x2 - x1;\r\n  return dy * dy + dx * dx;\r\n}\r\n\r\nexport function addVectors(a: Vector2D, b: Vector2D): Vector2D {\r\n  return {x: a.x + b.x, y: a.y + b.y};\r\n}\r\n\r\nexport function clampVector(a: Vector2D, min: number, max: number): Vector2D {\r\n  return {y: clamp(a.y, min, max), x: clamp(a.x, min, max)};\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\nimport {NUM_KEYPOINTS} from '../keypoints';\r\nimport {Padding, Pose} from '../types';\r\n\r\nimport {getScale} from './util';\r\n\r\ninterface Pair {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nfunction computeDistance(embedding: Pair[], pose: Pose, minPartScore = 0.3) {\r\n  let distance = 0.0;\r\n  let numKpt = 0;\r\n  for (let p = 0; p < embedding.length; p++) {\r\n    if (pose.keypoints[p].score > minPartScore) {\r\n      numKpt += 1;\r\n      distance += (embedding[p].x - pose.keypoints[p].position.x) ** 2 +\r\n          (embedding[p].y - pose.keypoints[p].position.y) ** 2;\r\n    }\r\n  }\r\n  if (numKpt === 0) {\r\n    distance = Infinity;\r\n  } else {\r\n    distance = distance / numKpt;\r\n  }\r\n  return distance;\r\n}\r\n\r\nfunction convertToPositionInOuput(\r\n    position: Pair, [padT, padL]: [number, number],\r\n    [scaleX, scaleY]: [number, number], stride: number): Pair {\r\n  const y = Math.round(((padT + position.y + 1.0) * scaleY - 1.0) / stride);\r\n  const x = Math.round(((padL + position.x + 1.0) * scaleX - 1.0) / stride);\r\n  return {x, y};\r\n}\r\n\r\nfunction getEmbedding(\r\n    location: Pair, keypointIndex: number,\r\n    convertToPosition: (pair: Pair) => Pair, outputResolutionX: number,\r\n    longOffsets: Float32Array, refineSteps: number,\r\n    [height, width]: [number, number]): Pair {\r\n  const newLocation = convertToPosition(location);\r\n\r\n  const nn = newLocation.y * outputResolutionX + newLocation.x;\r\n  let dy = longOffsets[NUM_KEYPOINTS * (2 * nn) + keypointIndex];\r\n  let dx = longOffsets[NUM_KEYPOINTS * (2 * nn + 1) + keypointIndex];\r\n  let y = location.y + dy;\r\n  let x = location.x + dx;\r\n  for (let t = 0; t < refineSteps; t++) {\r\n    y = Math.min(y, height - 1);\r\n    x = Math.min(x, width - 1);\r\n    const newPos = convertToPosition({x, y});\r\n    const nn = newPos.y * outputResolutionX + newPos.x;\r\n    dy = longOffsets[NUM_KEYPOINTS * (2 * nn) + keypointIndex];\r\n    dx = longOffsets[NUM_KEYPOINTS * (2 * nn + 1) + keypointIndex];\r\n    y = y + dy;\r\n    x = x + dx;\r\n  }\r\n\r\n  return {x, y};\r\n}\r\n\r\nfunction matchEmbeddingToInstance(\r\n    location: Pair, longOffsets: Float32Array, poses: Pose[],\r\n    numKptForMatching: number, [padT, padL]: [number, number],\r\n    [scaleX, scaleY]: [number, number], outputResolutionX: number,\r\n    [height, width]: [number, number], stride: number,\r\n    refineSteps: number): number {\r\n  const embed: Pair[] = [];\r\n  const convertToPosition = (pair: Pair) =>\r\n      convertToPositionInOuput(pair, [padT, padL], [scaleX, scaleY], stride);\r\n\r\n  for (let keypointsIndex = 0; keypointsIndex < numKptForMatching;\r\n       keypointsIndex++) {\r\n    const embedding = getEmbedding(\r\n        location, keypointsIndex, convertToPosition, outputResolutionX,\r\n        longOffsets, refineSteps, [height, width]);\r\n\r\n    embed.push(embedding);\r\n  }\r\n\r\n  let kMin = -1;\r\n  let kMinDist = Infinity;\r\n  for (let k = 0; k < poses.length; k++) {\r\n    const dist = computeDistance(embed, poses[k]);\r\n    if (dist < kMinDist) {\r\n      kMin = k;\r\n      kMinDist = dist;\r\n    }\r\n  }\r\n  return kMin;\r\n}\r\n\r\nfunction getOutputResolution(\r\n    [inputResolutionY, inputResolutionX]: [number, number],\r\n    stride: number): [number, number] {\r\n  const outputResolutionX = Math.round((inputResolutionX - 1.0) / stride + 1.0);\r\n  const outputResolutionY = Math.round((inputResolutionY - 1.0) / stride + 1.0);\r\n  return [outputResolutionX, outputResolutionY];\r\n}\r\n\r\nexport function decodeMultipleMasksCPU(\r\n    segmentation: Uint8Array, longOffsets: Float32Array,\r\n    posesAboveScore: Pose[], height: number, width: number, stride: number,\r\n    [inHeight, inWidth]: [number, number], padding: Padding,\r\n    refineSteps: number, numKptForMatching = 5): Uint8Array[] {\r\n  const dataArrays =\r\n      posesAboveScore.map(x => new Uint8Array(height * width).fill(0));\r\n\r\n  const {top: padT, left: padL} = padding;\r\n\r\n  const [scaleX, scaleY] =\r\n      getScale([height, width], [inHeight, inWidth], padding);\r\n  const [outputResolutionX, ] =\r\n    getOutputResolution([inHeight, inWidth], stride);\r\n  for (let i = 0; i < height; i += 1) {\r\n    for (let j = 0; j < width; j += 1) {\r\n      const n = i * width + j;\r\n      const prob = segmentation[n];\r\n      if (prob === 1) {\r\n        const kMin = matchEmbeddingToInstance(\r\n            {x: j, y: i}, longOffsets, posesAboveScore, numKptForMatching,\r\n            [padT, padL], [scaleX, scaleY], outputResolutionX, [height, width],\r\n            stride, refineSteps);\r\n        if (kMin >= 0) {\r\n          dataArrays[kMin][n] = 1;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return dataArrays;\r\n}\r\n\r\nexport function decodeMultiplePartMasksCPU(\r\n    segmentation: Uint8Array, longOffsets: Float32Array,\r\n    partSegmentaion: Uint8Array, posesAboveScore: Pose[], height: number,\r\n    width: number, stride: number, [inHeight, inWidth]: [number, number],\r\n    padding: Padding, refineSteps: number,\r\n    numKptForMatching = 5): Int32Array[] {\r\n  const dataArrays =\r\n      posesAboveScore.map(x => new Int32Array(height * width).fill(-1));\r\n\r\n  const {top: padT, left: padL} = padding;\r\n\r\n  const [scaleX, scaleY] =\r\n      getScale([height, width], [inHeight, inWidth], padding);\r\n  const [outputResolutionX, ] =\r\n    getOutputResolution([inHeight, inWidth], stride);\r\n\r\n  for (let i = 0; i < height; i += 1) {\r\n    for (let j = 0; j < width; j += 1) {\r\n      const n = i * width + j;\r\n      const prob = segmentation[n];\r\n      if (prob === 1) {\r\n        const kMin = matchEmbeddingToInstance(\r\n            {x: j, y: i}, longOffsets, posesAboveScore, numKptForMatching,\r\n            [padT, padL], [scaleX, scaleY], outputResolutionX, [height, width],\r\n            stride, refineSteps);\r\n        if (kMin >= 0) {\r\n          dataArrays[kMin][n] = partSegmentaion[n];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return dataArrays;\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\nimport * as tf from '@tensorflow/tfjs-core';\r\n\r\nimport {NUM_KEYPOINTS} from '../keypoints';\r\nimport {Padding, Pose} from '../types';\r\nimport {getScale} from './util';\r\n\r\nexport function decodeMultipleMasksWebGl(\r\n    segmentation: tf.Tensor2D, longOffsets: tf.Tensor3D,\r\n    posesAboveScore: Pose[], height: number, width: number, stride: number,\r\n    [inHeight, inWidth]: [number, number], padding: Padding,\r\n    refineSteps: number, minKptScore: number,\r\n    maxNumPeople: number): tf.Tensor2D {\r\n  // The height/width of the image/canvas itself.\r\n  const [origHeight, origWidth] = segmentation.shape;\r\n  // The height/width of the output of the model.\r\n  const [outHeight, outWidth] = longOffsets.shape.slice(0, 2);\r\n\r\n  const shapedLongOffsets: tf.Tensor4D =\r\n      longOffsets.reshape([outHeight, outWidth, 2, NUM_KEYPOINTS]);\r\n\r\n  // Make pose tensor of shape [MAX_NUM_PEOPLE, NUM_KEYPOINTS, 3] where\r\n  // the last 3 coordinates correspond to the score, h and w coordinate of that\r\n  // keypoint.\r\n  const poseVals = new Float32Array(maxNumPeople * NUM_KEYPOINTS * 3).fill(0.0);\r\n  for (let i = 0; i < posesAboveScore.length; i++) {\r\n    const poseOffset = i * NUM_KEYPOINTS * 3;\r\n    const pose = posesAboveScore[i];\r\n    for (let kp = 0; kp < NUM_KEYPOINTS; kp++) {\r\n      const keypoint = pose.keypoints[kp];\r\n      const offset = poseOffset + kp * 3;\r\n      poseVals[offset] = keypoint.score;\r\n      poseVals[offset + 1] = keypoint.position.y;\r\n      poseVals[offset + 2] = keypoint.position.x;\r\n    }\r\n  }\r\n\r\n  const [scaleX, scaleY] =\r\n      getScale([height, width], [inHeight, inWidth], padding);\r\n\r\n  const posesTensor = tf.tensor(poseVals, [maxNumPeople, NUM_KEYPOINTS, 3]);\r\n\r\n  const {top: padT, left: padL} = padding;\r\n\r\n  const program: tf.webgl.GPGPUProgram = {\r\n    variableNames: ['segmentation', 'longOffsets', 'poses'],\r\n    outputShape: [origHeight, origWidth],\r\n    userCode: `\r\n    int convertToPositionInOutput(int pos, int pad, float scale, int stride) {\r\n      return round(((float(pos + pad) + 1.0) * scale - 1.0) / float(stride));\r\n    }\r\n\r\n    float convertToPositionInOutputFloat(\r\n        int pos, int pad, float scale, int stride) {\r\n      return ((float(pos + pad) + 1.0) * scale - 1.0) / float(stride);\r\n    }\r\n\r\n    float dist(float x1, float y1, float x2, float y2) {\r\n      return pow(x1 - x2, 2.0) + pow(y1 - y2, 2.0);\r\n    }\r\n\r\n    float sampleLongOffsets(float h, float w, int d, int k) {\r\n      float fh = fract(h);\r\n      float fw = fract(w);\r\n      int clH = int(ceil(h));\r\n      int clW = int(ceil(w));\r\n      int flH = int(floor(h));\r\n      int flW = int(floor(w));\r\n      float o11 = getLongOffsets(flH, flW, d, k);\r\n      float o12 = getLongOffsets(flH, clW, d, k);\r\n      float o21 = getLongOffsets(clH, flW, d, k);\r\n      float o22 = getLongOffsets(clH, clW, d, k);\r\n      float o1 = mix(o11, o12, fw);\r\n      float o2 = mix(o21, o22, fw);\r\n      return mix(o1, o2, fh);\r\n    }\r\n\r\n    int findNearestPose(int h, int w) {\r\n      float prob = getSegmentation(h, w);\r\n      if (prob < 1.0) {\r\n        return -1;\r\n      }\r\n\r\n      // Done(Tyler): convert from output space h/w to strided space.\r\n      float stridedH = convertToPositionInOutputFloat(\r\n        h, ${padT}, ${scaleY}, ${stride});\r\n      float stridedW = convertToPositionInOutputFloat(\r\n        w, ${padL}, ${scaleX}, ${stride});\r\n\r\n      float minDist = 1000000.0;\r\n      int iMin = -1;\r\n      for (int i = 0; i < ${maxNumPeople}; i++) {\r\n        float curDistSum = 0.0;\r\n        int numKpt = 0;\r\n        for (int k = 0; k < ${NUM_KEYPOINTS}; k++) {\r\n          float dy = sampleLongOffsets(stridedH, stridedW, 0, k);\r\n          float dx = sampleLongOffsets(stridedH, stridedW, 1, k);\r\n\r\n          float y = float(h) + dy;\r\n          float x = float(w) + dx;\r\n\r\n          for (int s = 0; s < ${refineSteps}; s++) {\r\n            int yRounded = round(min(y, float(${height - 1.0})));\r\n            int xRounded = round(min(x, float(${width - 1.0})));\r\n\r\n            float yStrided = convertToPositionInOutputFloat(\r\n              yRounded, ${padT}, ${scaleY}, ${stride});\r\n            float xStrided = convertToPositionInOutputFloat(\r\n              xRounded, ${padL}, ${scaleX}, ${stride});\r\n\r\n            float dy = sampleLongOffsets(yStrided, xStrided, 0, k);\r\n            float dx = sampleLongOffsets(yStrided, xStrided, 1, k);\r\n\r\n            y = y + dy;\r\n            x = x + dx;\r\n          }\r\n\r\n          float poseScore = getPoses(i, k, 0);\r\n          float poseY = getPoses(i, k, 1);\r\n          float poseX = getPoses(i, k, 2);\r\n          if (poseScore > ${minKptScore}) {\r\n            numKpt = numKpt + 1;\r\n            curDistSum = curDistSum + dist(x, y, poseX, poseY);\r\n          }\r\n        }\r\n        if (numKpt > 0 && curDistSum / float(numKpt) < minDist) {\r\n          minDist = curDistSum / float(numKpt);\r\n          iMin = i;\r\n        }\r\n      }\r\n      return iMin;\r\n    }\r\n\r\n    void main() {\r\n        ivec2 coords = getOutputCoords();\r\n        int nearestPose = findNearestPose(coords[0], coords[1]);\r\n        setOutput(float(nearestPose));\r\n      }\r\n  `\r\n  };\r\n  const webglBackend = tf.backend() as tf.webgl.MathBackendWebGL;\r\n  return webglBackend.compileAndRun(\r\n      program, [segmentation, shapedLongOffsets, posesTensor]);\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\nimport * as tf from '@tensorflow/tfjs-core';\r\nimport {getBackend} from '@tensorflow/tfjs-core';\r\n\r\nimport {Padding, PartSegmentation, PersonSegmentation, Pose} from '../types';\r\n\r\nimport {decodeMultipleMasksCPU, decodeMultiplePartMasksCPU} from './decode_multiple_masks_cpu';\r\nimport {decodeMultipleMasksWebGl} from './decode_multiple_masks_webgl';\r\n\r\nexport function toPersonKSegmentation(\r\n    segmentation: tf.Tensor2D, k: number): tf.Tensor2D {\r\n  return tf.tidy(\r\n      () => (segmentation.equal(tf.scalar(k)).toInt() as tf.Tensor2D));\r\n}\r\n\r\nexport function toPersonKPartSegmentation(\r\n    segmentation: tf.Tensor2D, bodyParts: tf.Tensor2D, k: number): tf.Tensor2D {\r\n  return tf.tidy(\r\n      () => segmentation.equal(tf.scalar(k))\r\n                .toInt()\r\n                .mul(bodyParts.add(1))\r\n                .sub(1));\r\n}\r\n\r\nfunction isWebGlBackend() {\r\n  return getBackend() === 'webgl';\r\n}\r\n\r\nexport async function decodePersonInstanceMasks(\r\n    segmentation: tf.Tensor2D, longOffsets: tf.Tensor3D, poses: Pose[],\r\n    height: number, width: number, stride: number,\r\n    [inHeight, inWidth]: [number, number], padding: Padding, minPoseScore = 0.2,\r\n    refineSteps = 8, minKeypointScore = 0.3,\r\n    maxNumPeople = 10): Promise<PersonSegmentation[]> {\r\n  // Filter out poses with smaller score.\r\n  const posesAboveScore = poses.filter(pose => pose.score >= minPoseScore);\r\n\r\n  let personSegmentationsData: Uint8Array[];\r\n\r\n  if (isWebGlBackend()) {\r\n    const personSegmentations = tf.tidy(() => {\r\n      const masksTensor = decodeMultipleMasksWebGl(\r\n          segmentation, longOffsets, posesAboveScore, height, width, stride,\r\n          [inHeight, inWidth], padding, refineSteps, minKeypointScore,\r\n          maxNumPeople);\r\n\r\n      return posesAboveScore.map(\r\n          (_, k) => toPersonKSegmentation(masksTensor, k));\r\n    });\r\n\r\n    personSegmentationsData =\r\n        (await Promise.all(personSegmentations.map(mask => mask.data())) as\r\n         Uint8Array[]);\r\n\r\n    personSegmentations.forEach(x => x.dispose());\r\n  } else {\r\n    const segmentationsData = await segmentation.data() as Uint8Array;\r\n    const longOffsetsData = await longOffsets.data() as Float32Array;\r\n\r\n    personSegmentationsData = decodeMultipleMasksCPU(\r\n        segmentationsData, longOffsetsData, posesAboveScore, height, width,\r\n        stride, [inHeight, inWidth], padding, refineSteps);\r\n  }\r\n\r\n  return personSegmentationsData.map(\r\n      (data, i) => ({data, pose: posesAboveScore[i], width, height}));\r\n}\r\n\r\nexport async function decodePersonInstancePartMasks(\r\n    segmentation: tf.Tensor2D, longOffsets: tf.Tensor3D,\r\n    partSegmentation: tf.Tensor2D, poses: Pose[], height: number, width: number,\r\n    stride: number, [inHeight, inWidth]: [number, number], padding: Padding,\r\n    minPoseScore = 0.2, refineSteps = 8, minKeypointScore = 0.3,\r\n    maxNumPeople = 10): Promise<PartSegmentation[]> {\r\n  const posesAboveScore = poses.filter(pose => pose.score >= minPoseScore);\r\n\r\n  let partSegmentationsByPersonData: Int32Array[];\r\n\r\n  if (isWebGlBackend()) {\r\n    const partSegmentations = tf.tidy(() => {\r\n      const masksTensor = decodeMultipleMasksWebGl(\r\n          segmentation, longOffsets, posesAboveScore, height, width, stride,\r\n          [inHeight, inWidth], padding, refineSteps, minKeypointScore,\r\n          maxNumPeople);\r\n\r\n      return posesAboveScore.map(\r\n          (_, k) =>\r\n              toPersonKPartSegmentation(masksTensor, partSegmentation, k));\r\n    });\r\n\r\n    partSegmentationsByPersonData =\r\n        (await Promise.all(partSegmentations.map(x => x.data()))) as\r\n        Int32Array[];\r\n\r\n    partSegmentations.forEach(x => x.dispose());\r\n  } else {\r\n    const segmentationsData = await segmentation.data() as Uint8Array;\r\n    const longOffsetsData = await longOffsets.data() as Float32Array;\r\n    const partSegmentaionData = await partSegmentation.data() as Uint8Array;\r\n\r\n    partSegmentationsByPersonData = decodeMultiplePartMasksCPU(\r\n        segmentationsData, longOffsetsData, partSegmentaionData,\r\n        posesAboveScore, height, width, stride, [inHeight, inWidth], padding,\r\n        refineSteps);\r\n  }\r\n\r\n  return partSegmentationsByPersonData.map(\r\n      (data, k) => ({pose: posesAboveScore[k], data, height, width}));\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\n// algorithm based on Coursera Lecture from Algorithms, Part 1:\r\n// https://www.coursera.org/learn/algorithms-part1/lecture/ZjoSM/heapsort\r\n\r\nfunction half(k: number) {\r\n  return Math.floor(k / 2);\r\n}\r\n\r\nexport class MaxHeap<T> {\r\n  private priorityQueue: T[];\r\n  private numberOfElements: number;\r\n  private getElementValue: (element: T) => number;\r\n\r\n  constructor(maxSize: number, getElementValue: (element: T) => number) {\r\n    this.priorityQueue = new Array(maxSize);\r\n    this.numberOfElements = -1;\r\n    this.getElementValue = getElementValue;\r\n  }\r\n\r\n  public enqueue(x: T): void {\r\n    this.priorityQueue[++this.numberOfElements] = x;\r\n    this.swim(this.numberOfElements);\r\n  }\r\n\r\n  public dequeue(): T {\r\n    const max = this.priorityQueue[0];\r\n    this.exchange(0, this.numberOfElements--);\r\n    this.sink(0);\r\n    this.priorityQueue[this.numberOfElements + 1] = null;\r\n    return max;\r\n  }\r\n\r\n  public empty(): boolean {\r\n    return this.numberOfElements === -1;\r\n  }\r\n\r\n  public size(): number {\r\n    return this.numberOfElements + 1;\r\n  }\r\n\r\n  public all(): T[] {\r\n    return this.priorityQueue.slice(0, this.numberOfElements + 1);\r\n  }\r\n\r\n  public max(): T {\r\n    return this.priorityQueue[0];\r\n  }\r\n\r\n  private swim(k: number): void {\r\n    while (k > 0 && this.less(half(k), k)) {\r\n      this.exchange(k, half(k));\r\n      k = half(k);\r\n    }\r\n  }\r\n\r\n  private sink(k: number): void {\r\n    while (2 * k <= this.numberOfElements) {\r\n      let j = 2 * k;\r\n      if (j < this.numberOfElements && this.less(j, j + 1)) {\r\n        j++;\r\n      }\r\n      if (!this.less(k, j)) {\r\n        break;\r\n      }\r\n      this.exchange(k, j);\r\n      k = j;\r\n    }\r\n  }\r\n\r\n  private getValueAt(i: number): number {\r\n    return this.getElementValue(this.priorityQueue[i]);\r\n  }\r\n\r\n  private less(i: number, j: number): boolean {\r\n    return this.getValueAt(i) < this.getValueAt(j);\r\n  }\r\n\r\n  private exchange(i: number, j: number): void {\r\n    const t = this.priorityQueue[i];\r\n    this.priorityQueue[i] = this.priorityQueue[j];\r\n    this.priorityQueue[j] = t;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\nimport {PartWithScore, TensorBuffer3D} from '../types';\r\n\r\nimport {MaxHeap} from './max_heap';\r\n\r\nfunction scoreIsMaximumInLocalWindow(\r\n    keypointId: number, score: number, heatmapY: number, heatmapX: number,\r\n    localMaximumRadius: number, scores: TensorBuffer3D): boolean {\r\n  const [height, width] = scores.shape;\r\n\r\n  let localMaximum = true;\r\n  const yStart = Math.max(heatmapY - localMaximumRadius, 0);\r\n  const yEnd = Math.min(heatmapY + localMaximumRadius + 1, height);\r\n  for (let yCurrent = yStart; yCurrent < yEnd; ++yCurrent) {\r\n    const xStart = Math.max(heatmapX - localMaximumRadius, 0);\r\n    const xEnd = Math.min(heatmapX + localMaximumRadius + 1, width);\r\n    for (let xCurrent = xStart; xCurrent < xEnd; ++xCurrent) {\r\n      if (scores.get(yCurrent, xCurrent, keypointId) > score) {\r\n        localMaximum = false;\r\n        break;\r\n      }\r\n    }\r\n    if (!localMaximum) {\r\n      break;\r\n    }\r\n  }\r\n\r\n  return localMaximum;\r\n}\r\n\r\n/**\r\n * Builds a priority queue with part candidate positions for a specific image in\r\n * the batch. For this we find all local maxima in the score maps with score\r\n * values above a threshold. We create a single priority queue across all parts.\r\n */\r\nexport function buildPartWithScoreQueue(\r\n    scoreThreshold: number, localMaximumRadius: number,\r\n    scores: TensorBuffer3D): MaxHeap<PartWithScore> {\r\n  const [height, width, numKeypoints] = scores.shape;\r\n\r\n  const queue = new MaxHeap<PartWithScore>(\r\n      height * width * numKeypoints, ({score}) => score);\r\n\r\n  for (let heatmapY = 0; heatmapY < height; ++heatmapY) {\r\n    for (let heatmapX = 0; heatmapX < width; ++heatmapX) {\r\n      for (let keypointId = 0; keypointId < numKeypoints; ++keypointId) {\r\n        const score = scores.get(heatmapY, heatmapX, keypointId);\r\n\r\n        // Only consider parts with score greater or equal to threshold as\r\n        // root candidates.\r\n        if (score < scoreThreshold) {\r\n          continue;\r\n        }\r\n\r\n        // Only consider keypoints whose score is maximum in a local window.\r\n        if (scoreIsMaximumInLocalWindow(\r\n                keypointId, score, heatmapY, heatmapX, localMaximumRadius,\r\n                scores)) {\r\n          queue.enqueue({score, part: {heatmapY, heatmapX, id: keypointId}});\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return queue;\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\nimport {NumberTuple, PART_IDS, PART_NAMES, POSE_CHAIN} from '../keypoints';\r\nimport {Keypoint, PartWithScore, TensorBuffer3D, Vector2D} from '../types';\r\n\r\nimport {clamp, getOffsetPoint} from './util';\r\nimport {addVectors, getImageCoords} from './util';\r\n\r\nconst parentChildrenTuples: NumberTuple[] = POSE_CHAIN.map(\r\n    ([parentJoinName, childJoinName]): NumberTuple =>\r\n        ([PART_IDS[parentJoinName], PART_IDS[childJoinName]]));\r\n\r\nconst parentToChildEdges: number[] =\r\n    parentChildrenTuples.map(([, childJointId]) => childJointId);\r\n\r\nconst childToParentEdges: number[] =\r\n    parentChildrenTuples.map(([\r\n                               parentJointId,\r\n                             ]) => parentJointId);\r\n\r\nfunction getDisplacement(\r\n    edgeId: number, point: Vector2D, displacements: TensorBuffer3D): Vector2D {\r\n  const numEdges = displacements.shape[2] / 2;\r\n  return {\r\n    y: displacements.get(point.y, point.x, edgeId),\r\n    x: displacements.get(point.y, point.x, numEdges + edgeId)\r\n  };\r\n}\r\n\r\nfunction getStridedIndexNearPoint(\r\n    point: Vector2D, outputStride: number, height: number,\r\n    width: number): Vector2D {\r\n  return {\r\n    y: clamp(Math.round(point.y / outputStride), 0, height - 1),\r\n    x: clamp(Math.round(point.x / outputStride), 0, width - 1)\r\n  };\r\n}\r\n\r\n/**\r\n * We get a new keypoint along the `edgeId` for the pose instance, assuming\r\n * that the position of the `idSource` part is already known. For this, we\r\n * follow the displacement vector from the source to target part (stored in\r\n * the `i`-t channel of the displacement tensor). The displaced keypoint\r\n * vector is refined using the offset vector by `offsetRefineStep` times.\r\n */\r\nfunction traverseToTargetKeypoint(\r\n    edgeId: number, sourceKeypoint: Keypoint, targetKeypointId: number,\r\n    scoresBuffer: TensorBuffer3D, offsets: TensorBuffer3D, outputStride: number,\r\n    displacements: TensorBuffer3D, offsetRefineStep = 2): Keypoint {\r\n  const [height, width] = scoresBuffer.shape;\r\n\r\n  // Nearest neighbor interpolation for the source->target displacements.\r\n  const sourceKeypointIndices = getStridedIndexNearPoint(\r\n      sourceKeypoint.position, outputStride, height, width);\r\n\r\n  const displacement =\r\n      getDisplacement(edgeId, sourceKeypointIndices, displacements);\r\n\r\n  const displacedPoint = addVectors(sourceKeypoint.position, displacement);\r\n  let targetKeypoint = displacedPoint;\r\n  for (let i = 0; i < offsetRefineStep; i++) {\r\n    const targetKeypointIndices =\r\n        getStridedIndexNearPoint(targetKeypoint, outputStride, height, width);\r\n\r\n    const offsetPoint = getOffsetPoint(\r\n        targetKeypointIndices.y, targetKeypointIndices.x, targetKeypointId,\r\n        offsets);\r\n\r\n    targetKeypoint = addVectors(\r\n        {\r\n          x: targetKeypointIndices.x * outputStride,\r\n          y: targetKeypointIndices.y * outputStride\r\n        },\r\n        {x: offsetPoint.x, y: offsetPoint.y});\r\n  }\r\n  const targetKeyPointIndices =\r\n      getStridedIndexNearPoint(targetKeypoint, outputStride, height, width);\r\n  const score = scoresBuffer.get(\r\n      targetKeyPointIndices.y, targetKeyPointIndices.x, targetKeypointId);\r\n\r\n  return {position: targetKeypoint, part: PART_NAMES[targetKeypointId], score};\r\n}\r\n\r\n/**\r\n * Follows the displacement fields to decode the full pose of the object\r\n * instance given the position of a part that acts as root.\r\n *\r\n * @return An array of decoded keypoints and their scores for a single pose\r\n */\r\nexport function decodePose(\r\n    root: PartWithScore, scores: TensorBuffer3D, offsets: TensorBuffer3D,\r\n    outputStride: number, displacementsFwd: TensorBuffer3D,\r\n    displacementsBwd: TensorBuffer3D): Keypoint[] {\r\n  const numParts = scores.shape[2];\r\n  const numEdges = parentToChildEdges.length;\r\n\r\n  const instanceKeypoints: Keypoint[] = new Array(numParts);\r\n  // Start a new detection instance at the position of the root.\r\n  const {part: rootPart, score: rootScore} = root;\r\n  const rootPoint = getImageCoords(rootPart, outputStride, offsets);\r\n\r\n  instanceKeypoints[rootPart.id] = {\r\n    score: rootScore,\r\n    part: PART_NAMES[rootPart.id],\r\n    position: rootPoint\r\n  };\r\n\r\n  // Decode the part positions upwards in the tree, following the backward\r\n  // displacements.\r\n  for (let edge = numEdges - 1; edge >= 0; --edge) {\r\n    const sourceKeypointId = parentToChildEdges[edge];\r\n    const targetKeypointId = childToParentEdges[edge];\r\n    if (instanceKeypoints[sourceKeypointId] &&\r\n        !instanceKeypoints[targetKeypointId]) {\r\n      instanceKeypoints[targetKeypointId] = traverseToTargetKeypoint(\r\n          edge, instanceKeypoints[sourceKeypointId], targetKeypointId, scores,\r\n          offsets, outputStride, displacementsBwd);\r\n    }\r\n  }\r\n\r\n  // Decode the part positions downwards in the tree, following the forward\r\n  // displacements.\r\n  for (let edge = 0; edge < numEdges; ++edge) {\r\n    const sourceKeypointId = childToParentEdges[edge];\r\n    const targetKeypointId = parentToChildEdges[edge];\r\n    if (instanceKeypoints[sourceKeypointId] &&\r\n        !instanceKeypoints[targetKeypointId]) {\r\n      instanceKeypoints[targetKeypointId] = traverseToTargetKeypoint(\r\n          edge, instanceKeypoints[sourceKeypointId], targetKeypointId, scores,\r\n          offsets, outputStride, displacementsFwd);\r\n    }\r\n  }\r\n\r\n  return instanceKeypoints;\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\nimport {Keypoint, Pose, TensorBuffer3D} from '../types';\r\n\r\nimport {buildPartWithScoreQueue} from './build_part_with_score_queue';\r\nimport {decodePose} from './decode_pose';\r\nimport {getImageCoords, squaredDistance} from './util';\r\n\r\nfunction withinNmsRadiusOfCorrespondingPoint(\r\n    poses: Pose[], squaredNmsRadius: number, {x, y}: {x: number, y: number},\r\n    keypointId: number): boolean {\r\n  return poses.some(({keypoints}) => {\r\n    const correspondingKeypoint = keypoints[keypointId].position;\r\n    return squaredDistance(\r\n               y, x, correspondingKeypoint.y, correspondingKeypoint.x) <=\r\n        squaredNmsRadius;\r\n  });\r\n}\r\n\r\n/* Score the newly proposed object instance without taking into account\r\n * the scores of the parts that overlap with any previously detected\r\n * instance.\r\n */\r\nfunction getInstanceScore(\r\n    existingPoses: Pose[], squaredNmsRadius: number,\r\n    instanceKeypoints: Keypoint[]): number {\r\n  let notOverlappedKeypointScores = instanceKeypoints.reduce(\r\n      (result, {position, score}, keypointId): number => {\r\n        if (!withinNmsRadiusOfCorrespondingPoint(\r\n                existingPoses, squaredNmsRadius, position, keypointId)) {\r\n          result += score;\r\n        }\r\n        return result;\r\n      }, 0.0);\r\n\r\n  return notOverlappedKeypointScores /= instanceKeypoints.length;\r\n}\r\n\r\n// A point (y, x) is considered as root part candidate if its score is a\r\n// maximum in a window |y - y'| <= kLocalMaximumRadius, |x - x'| <=\r\n// kLocalMaximumRadius.\r\nconst kLocalMaximumRadius = 1;\r\n\r\n/**\r\n * Detects multiple poses and finds their parts from part scores and\r\n * displacement vectors. It returns up to `maxDetections` object instance\r\n * detections in decreasing root score order. It works as follows: We first\r\n * create a priority queue with local part score maxima above\r\n * `scoreThreshold`, considering all parts at the same time. Then we\r\n * iteratively pull the top  element of the queue (in decreasing score order)\r\n * and treat it as a root candidate for a new object instance. To avoid\r\n * duplicate detections, we reject the root candidate if it is within a disk\r\n * of `nmsRadius` pixels from the corresponding part of a previously detected\r\n * instance, which is a form of part-based non-maximum suppression (NMS). If\r\n * the root candidate passes the NMS check, we start a new object instance\r\n * detection, treating the corresponding part as root and finding the\r\n * positions of the remaining parts by following the displacement vectors\r\n * along the tree-structured part graph. We assign to the newly detected\r\n * instance a score equal to the sum of scores of its parts which have not\r\n * been claimed by a previous instance (i.e., those at least `nmsRadius`\r\n * pixels away from the corresponding part of all previously detected\r\n * instances), divided by the total number of parts `numParts`.\r\n *\r\n * @param heatmapScores 3-D tensor with shape `[height, width, numParts]`.\r\n * The value of heatmapScores[y, x, k]` is the score of placing the `k`-th\r\n * object part at position `(y, x)`.\r\n *\r\n * @param offsets 3-D tensor with shape `[height, width, numParts * 2]`.\r\n * The value of [offsets[y, x, k], offsets[y, x, k + numParts]]` is the\r\n * short range offset vector of the `k`-th  object part at heatmap\r\n * position `(y, x)`.\r\n *\r\n * @param displacementsFwd 3-D tensor of shape\r\n * `[height, width, 2 * num_edges]`, where `num_edges = num_parts - 1` is the\r\n * number of edges (parent-child pairs) in the tree. It contains the forward\r\n * displacements between consecutive part from the root towards the leaves.\r\n *\r\n * @param displacementsBwd 3-D tensor of shape\r\n * `[height, width, 2 * num_edges]`, where `num_edges = num_parts - 1` is the\r\n * number of edges (parent-child pairs) in the tree. It contains the backward\r\n * displacements between consecutive part from the root towards the leaves.\r\n *\r\n * @param outputStride The output stride that was used when feed-forwarding\r\n * through the PoseNet model.  Must be 32, 16, or 8.\r\n *\r\n * @param maxPoseDetections Maximum number of returned instance detections per\r\n * image.\r\n *\r\n * @param scoreThreshold Only return instance detections that have root part\r\n * score greater or equal to this value. Defaults to 0.5.\r\n *\r\n * @param nmsRadius Non-maximum suppression part distance. It needs to be\r\n * strictly positive. Two parts suppress each other if they are less than\r\n * `nmsRadius` pixels away. Defaults to 20.\r\n *\r\n * @return An array of poses and their scores, each containing keypoints and\r\n * the corresponding keypoint scores.\r\n */\r\nexport function decodeMultiplePoses(\r\n    scoresBuffer: TensorBuffer3D, offsetsBuffer: TensorBuffer3D,\r\n    displacementsFwdBuffer: TensorBuffer3D,\r\n    displacementsBwdBuffer: TensorBuffer3D, outputStride: number,\r\n    maxPoseDetections: number, scoreThreshold = 0.5, nmsRadius = 20): Pose[] {\r\n  const poses: Pose[] = [];\r\n\r\n  const queue = buildPartWithScoreQueue(\r\n      scoreThreshold, kLocalMaximumRadius, scoresBuffer);\r\n\r\n  const squaredNmsRadius = nmsRadius * nmsRadius;\r\n\r\n  // Generate at most maxDetections object instances per image in\r\n  // decreasing root part score order.\r\n  while (poses.length < maxPoseDetections && !queue.empty()) {\r\n    // The top element in the queue is the next root candidate.\r\n    const root = queue.dequeue();\r\n\r\n    // Part-based non-maximum suppression: We reject a root candidate if it\r\n    // is within a disk of `nmsRadius` pixels from the corresponding part of\r\n    // a previously detected instance.\r\n    const rootImageCoords =\r\n        getImageCoords(root.part, outputStride, offsetsBuffer);\r\n    if (withinNmsRadiusOfCorrespondingPoint(\r\n            poses, squaredNmsRadius, rootImageCoords, root.part.id)) {\r\n      continue;\r\n    }\r\n\r\n    // Start a new detection instance at the position of the root.\r\n    const keypoints = decodePose(\r\n        root, scoresBuffer, offsetsBuffer, outputStride, displacementsFwdBuffer,\r\n        displacementsBwdBuffer);\r\n\r\n    const score = getInstanceScore(poses, squaredNmsRadius, keypoints);\r\n\r\n    poses.push({keypoints, score});\r\n  }\r\n\r\n  return poses;\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * https://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\nimport * as tf from '@tensorflow/tfjs-core';\r\n\r\nimport {BaseModel} from './base_model';\r\n\r\nconst imageNetMean = [-123.15, -115.90, -103.06];\r\n\r\nexport class ResNet extends BaseModel {\r\n  preprocessInput(input: tf.Tensor3D): tf.Tensor3D {\r\n    return input.add(imageNetMean);\r\n  }\r\n\r\n  nameOutputResults(results: tf.Tensor3D[]) {\r\n    const [\r\n      displacementBwd,\r\n      displacementFwd,\r\n      heatmap,\r\n      longOffsets,\r\n      offsets,\r\n      partHeatmaps,\r\n      segmentation,\r\n      partOffsets,\r\n  ] = results;\r\n    return {\r\n      offsets,\r\n      segmentation,\r\n      partHeatmaps,\r\n      longOffsets,\r\n      heatmap,\r\n      displacementFwd,\r\n      displacementBwd,\r\n      partOffsets\r\n    };\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * https://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\nconst RESNET50_BASE_URL =\r\n    'https://storage.googleapis.com/tfjs-models/savedmodel/bodypix/resnet50/';\r\nconst MOBILENET_BASE_URL =\r\n    'https://storage.googleapis.com/tfjs-models/savedmodel/bodypix/mobilenet/';\r\n\r\n// The BodyPix 2.0 ResNet50 models use the latest TensorFlow.js 1.0 model\r\n// format.\r\nexport function resNet50SavedModel(stride: number, quantBytes: number): string {\r\n  const graphJson = `model-stride${stride}.json`;\r\n  // quantBytes=4 corresponding to the non-quantized full-precision SavedModel.\r\n  if (quantBytes === 4) {\r\n    return RESNET50_BASE_URL + `float/` + graphJson;\r\n  } else {\r\n    return RESNET50_BASE_URL + `quant${quantBytes}/` + graphJson;\r\n  }\r\n}\r\n\r\n// The BodyPix 2.0 MobileNetV1 models use the latest TensorFlow.js 1.0 model\r\n// format.\r\nexport function mobileNetSavedModel(\r\n    stride: number, multiplier: number, quantBytes: number): string {\r\n  const toStr: {[key: number]: string} = {1.0: '100', 0.75: '075', 0.50: '050'};\r\n  const graphJson = `model-stride${stride}.json`;\r\n  // quantBytes=4 corresponding to the non-quantized full-precision SavedModel.\r\n  if (quantBytes === 4) {\r\n    return MOBILENET_BASE_URL + `float/${toStr[multiplier]}/` + graphJson;\r\n  } else {\r\n    return MOBILENET_BASE_URL + `quant${quantBytes}/${toStr[multiplier]}/` +\r\n        graphJson;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * =============================================================================\r\n */\r\n\r\nimport * as tf from '@tensorflow/tfjs-core';\r\n\r\nimport {BodyPixInput, BodyPixOutputStride, Padding} from './types';\r\nimport {Pose, TensorBuffer3D} from './types';\r\nimport {BodyPixInternalResolution} from './types';\r\n\r\nfunction getSizeFromImageLikeElement(input: HTMLImageElement|\r\n                                     HTMLCanvasElement): [number, number] {\r\n  if (input.offsetHeight !== 0 && input.offsetWidth !== 0) {\r\n    return [input.offsetHeight, input.offsetWidth];\r\n  } else if (input.height != null && input.width != null) {\r\n    return [input.height, input.width];\r\n  } else {\r\n    throw new Error(\r\n        `HTMLImageElement must have height and width attributes set.`);\r\n  }\r\n}\r\n\r\nfunction getSizeFromVideoElement(input: HTMLVideoElement): [number, number] {\r\n  if (input.height != null && input.width != null) {\r\n    // Prioritizes user specified height and width.\r\n    return [input.height, input.width];\r\n  } else {\r\n    return [input.videoHeight, input.videoWidth];\r\n  }\r\n}\r\n\r\nexport function getInputSize(input: BodyPixInput): [number, number] {\r\n  if ((typeof (HTMLCanvasElement) !== 'undefined' &&\r\n       input instanceof HTMLCanvasElement) ||\r\n      (typeof (HTMLImageElement) !== 'undefined' &&\r\n       input instanceof HTMLImageElement)) {\r\n    return getSizeFromImageLikeElement(input);\r\n  } else if (typeof (ImageData) !== 'undefined' && input instanceof ImageData) {\r\n    return [input.height, input.width];\r\n  } else if (\r\n      typeof (HTMLVideoElement) !== 'undefined' &&\r\n      input instanceof HTMLVideoElement) {\r\n    return getSizeFromVideoElement(input);\r\n  } else if (input instanceof tf.Tensor) {\r\n    return [input.shape[0], input.shape[1]];\r\n  } else {\r\n    throw new Error(`error: Unknown input type: ${input}.`);\r\n  }\r\n}\r\n\r\nfunction isValidInputResolution(\r\n    resolution: number, outputStride: number): boolean {\r\n  return (resolution - 1) % outputStride === 0;\r\n}\r\n\r\nexport function toValidInputResolution(\r\n    inputResolution: number, outputStride: BodyPixOutputStride): number {\r\n  if (isValidInputResolution(inputResolution, outputStride)) {\r\n    return inputResolution;\r\n  }\r\n\r\n  return Math.floor(inputResolution / outputStride) * outputStride + 1;\r\n}\r\n\r\nconst INTERNAL_RESOLUTION_STRING_OPTIONS = {\r\n  low: 'low',\r\n  medium: 'medium',\r\n  high: 'high',\r\n  full: 'full'\r\n};\r\n\r\nconst INTERNAL_RESOLUTION_PERCENTAGES = {\r\n  [INTERNAL_RESOLUTION_STRING_OPTIONS.low]: 0.25,\r\n  [INTERNAL_RESOLUTION_STRING_OPTIONS.medium]: 0.5,\r\n  [INTERNAL_RESOLUTION_STRING_OPTIONS.high]: 0.75,\r\n  [INTERNAL_RESOLUTION_STRING_OPTIONS.full]: 1.0\r\n};\r\n\r\nconst MIN_INTERNAL_RESOLUTION = 0.1;\r\nconst MAX_INTERNAL_RESOLUTION = 2.0;\r\n\r\nfunction toInternalResolutionPercentage(\r\n    internalResolution: BodyPixInternalResolution): number {\r\n  if (typeof internalResolution === 'string') {\r\n    const result = INTERNAL_RESOLUTION_PERCENTAGES[internalResolution];\r\n\r\n    tf.util.assert(\r\n        typeof result === 'number',\r\n        () => `string value of inputResolution must be one of ${\r\n            Object.values(INTERNAL_RESOLUTION_STRING_OPTIONS)\r\n                .join(',')} but was ${internalResolution}.`);\r\n    return result;\r\n  } else {\r\n    tf.util.assert(\r\n        typeof internalResolution === 'number' &&\r\n            internalResolution <= MAX_INTERNAL_RESOLUTION &&\r\n            internalResolution >= MIN_INTERNAL_RESOLUTION,\r\n        () =>\r\n            `inputResolution must be a string or number between ${\r\n                MIN_INTERNAL_RESOLUTION} and ${MAX_INTERNAL_RESOLUTION}, but ` +\r\n            `was ${internalResolution}`);\r\n\r\n    return internalResolution;\r\n  }\r\n}\r\n\r\nexport function toInputResolutionHeightAndWidth(\r\n    internalResolution: BodyPixInternalResolution,\r\n    outputStride: BodyPixOutputStride,\r\n    [inputHeight, inputWidth]: [number, number]): [number, number] {\r\n  const internalResolutionPercentage =\r\n      toInternalResolutionPercentage(internalResolution);\r\n\r\n  return [\r\n    toValidInputResolution(\r\n        inputHeight * internalResolutionPercentage, outputStride),\r\n    toValidInputResolution(\r\n        inputWidth * internalResolutionPercentage, outputStride)\r\n  ];\r\n}\r\n\r\nexport function toInputTensor(input: BodyPixInput) {\r\n  return input instanceof tf.Tensor ? input : tf.browser.fromPixels(input);\r\n}\r\n\r\nexport function resizeAndPadTo(\r\n    imageTensor: tf.Tensor3D, [targetH, targetW]: [number, number],\r\n    flipHorizontal = false): {\r\n  resizedAndPadded: tf.Tensor3D,\r\n  paddedBy: [[number, number], [number, number]]\r\n} {\r\n  const [height, width] = imageTensor.shape;\r\n\r\n  const targetAspect = targetW / targetH;\r\n  const aspect = width / height;\r\n\r\n  let resizeW: number;\r\n  let resizeH: number;\r\n  let padL: number;\r\n  let padR: number;\r\n  let padT: number;\r\n  let padB: number;\r\n\r\n  if (aspect > targetAspect) {\r\n    // resize to have the larger dimension match the shape.\r\n    resizeW = targetW;\r\n    resizeH = Math.ceil(resizeW / aspect);\r\n\r\n    const padHeight = targetH - resizeH;\r\n    padL = 0;\r\n    padR = 0;\r\n    padT = Math.floor(padHeight / 2);\r\n    padB = targetH - (resizeH + padT);\r\n  } else {\r\n    resizeH = targetH;\r\n    resizeW = Math.ceil(targetH * aspect);\r\n\r\n    const padWidth = targetW - resizeW;\r\n    padL = Math.floor(padWidth / 2);\r\n    padR = targetW - (resizeW + padL);\r\n    padT = 0;\r\n    padB = 0;\r\n  }\r\n\r\n  const resizedAndPadded = tf.tidy(() => {\r\n    // resize to have largest dimension match image\r\n    let resized: tf.Tensor3D;\r\n    if (flipHorizontal) {\r\n      resized = imageTensor.reverse(1).resizeBilinear([resizeH, resizeW]);\r\n    } else {\r\n      resized = imageTensor.resizeBilinear([resizeH, resizeW]);\r\n    }\r\n\r\n    const padded = tf.pad3d(resized, [[padT, padB], [padL, padR], [0, 0]]);\r\n\r\n    return padded;\r\n  });\r\n\r\n  return {resizedAndPadded, paddedBy: [[padT, padB], [padL, padR]]};\r\n}\r\n\r\nexport function scaleAndCropToInputTensorShape(\r\n    tensor: tf.Tensor3D,\r\n    [inputTensorHeight, inputTensorWidth]: [number, number],\r\n    [resizedAndPaddedHeight, resizedAndPaddedWidth]: [number, number],\r\n    [[padT, padB], [padL, padR]]: [[number, number], [number, number]],\r\n    applySigmoidActivation = false): tf.Tensor3D {\r\n  return tf.tidy(() => {\r\n    let inResizedAndPadded: tf.Tensor3D = tensor.resizeBilinear(\r\n        [resizedAndPaddedHeight, resizedAndPaddedWidth], true);\r\n\r\n    if (applySigmoidActivation) {\r\n      inResizedAndPadded = inResizedAndPadded.sigmoid();\r\n    }\r\n\r\n    return removePaddingAndResizeBack(\r\n        inResizedAndPadded, [inputTensorHeight, inputTensorWidth],\r\n        [[padT, padB], [padL, padR]]);\r\n  });\r\n}\r\n\r\nexport function removePaddingAndResizeBack(\r\n    resizedAndPadded: tf.Tensor3D,\r\n    [originalHeight, originalWidth]: [number, number],\r\n    [[padT, padB], [padL, padR]]: [[number, number], [number, number]]):\r\n    tf.Tensor3D {\r\n  return tf.tidy(() => {\r\n    const batchedImage: tf.Tensor4D = resizedAndPadded.expandDims();\r\n    return tf.image\r\n        .cropAndResize(\r\n            batchedImage, [[\r\n              padT / (originalHeight + padT + padB - 1.0),\r\n              padL / (originalWidth + padL + padR - 1.0),\r\n              (padT + originalHeight - 1.0) /\r\n                  (originalHeight + padT + padB - 1.0),\r\n              (padL + originalWidth - 1.0) / (originalWidth + padL + padR - 1.0)\r\n            ]],\r\n            [0], [originalHeight, originalWidth])\r\n        .squeeze([0]);\r\n  });\r\n}\r\n\r\nexport function resize2d(\r\n    tensor: tf.Tensor2D, resolution: [number, number],\r\n    nearestNeighbor?: boolean): tf.Tensor2D {\r\n  return tf.tidy(() => {\r\n    const batchedImage: tf.Tensor4D = tensor.expandDims(2);\r\n    return batchedImage.resizeBilinear(resolution, nearestNeighbor).squeeze();\r\n  });\r\n}\r\n\r\nexport function padAndResizeTo(\r\n    input: BodyPixInput, [targetH, targetW]: [number, number]):\r\n    {resized: tf.Tensor3D, padding: Padding} {\r\n  const [height, width] = getInputSize(input);\r\n  const targetAspect = targetW / targetH;\r\n  const aspect = width / height;\r\n  let [padT, padB, padL, padR] = [0, 0, 0, 0];\r\n  if (aspect < targetAspect) {\r\n    // pads the width\r\n    padT = 0;\r\n    padB = 0;\r\n    padL = Math.round(0.5 * (targetAspect * height - width));\r\n    padR = Math.round(0.5 * (targetAspect * height - width));\r\n  } else {\r\n    // pads the height\r\n    padT = Math.round(0.5 * ((1.0 / targetAspect) * width - height));\r\n    padB = Math.round(0.5 * ((1.0 / targetAspect) * width - height));\r\n    padL = 0;\r\n    padR = 0;\r\n  }\r\n\r\n  const resized: tf.Tensor3D = tf.tidy(() => {\r\n    let imageTensor = toInputTensor(input);\r\n    imageTensor = tf.pad3d(imageTensor, [[padT, padB], [padL, padR], [0, 0]]);\r\n\r\n    return imageTensor.resizeBilinear([targetH, targetW]);\r\n  });\r\n\r\n  return {resized, padding: {top: padT, left: padL, right: padR, bottom: padB}};\r\n}\r\n\r\nexport async function toTensorBuffers3D(tensors: tf.Tensor3D[]):\r\n    Promise<TensorBuffer3D[]> {\r\n  return Promise.all(tensors.map(tensor => tensor.buffer()));\r\n}\r\n\r\nexport function scalePose(\r\n    pose: Pose, scaleY: number, scaleX: number, offsetY = 0,\r\n    offsetX = 0): Pose {\r\n  return {\r\n    score: pose.score,\r\n    keypoints: pose.keypoints.map(({score, part, position}) => ({\r\n                                    score,\r\n                                    part,\r\n                                    position: {\r\n                                      x: position.x * scaleX + offsetX,\r\n                                      y: position.y * scaleY + offsetY\r\n                                    }\r\n                                  }))\r\n  };\r\n}\r\n\r\nexport function scalePoses(\r\n    poses: Pose[], scaleY: number, scaleX: number, offsetY = 0, offsetX = 0) {\r\n  if (scaleX === 1 && scaleY === 1 && offsetY === 0 && offsetX === 0) {\r\n    return poses;\r\n  }\r\n  return poses.map(pose => scalePose(pose, scaleY, scaleX, offsetY, offsetX));\r\n}\r\n\r\nexport function flipPoseHorizontal(pose: Pose, imageWidth: number): Pose {\r\n  return {\r\n    score: pose.score,\r\n    keypoints: pose.keypoints.map(\r\n        ({score, part, position}) => ({\r\n          score,\r\n          part,\r\n          position: {x: imageWidth - 1 - position.x, y: position.y}\r\n        }))\r\n  };\r\n}\r\n\r\nexport function flipPosesHorizontal(poses: Pose[], imageWidth: number) {\r\n  if (imageWidth <= 0) {\r\n    return poses;\r\n  }\r\n  return poses.map(pose => flipPoseHorizontal(pose, imageWidth));\r\n}\r\n\r\nexport function scaleAndFlipPoses(\r\n    poses: Pose[], [height, width]: [number, number],\r\n    [inputResolutionHeight, inputResolutionWidth]: [number, number],\r\n    padding: Padding, flipHorizontal: boolean): Pose[] {\r\n  const scaleY =\r\n      (height + padding.top + padding.bottom) / (inputResolutionHeight);\r\n  const scaleX =\r\n      (width + padding.left + padding.right) / (inputResolutionWidth);\r\n\r\n  const scaledPoses =\r\n      scalePoses(poses, scaleY, scaleX, -padding.top, -padding.left);\r\n\r\n  if (flipHorizontal) {\r\n    return flipPosesHorizontal(scaledPoses, width);\r\n  } else {\r\n    return scaledPoses;\r\n  }\r\n}\r\n","\r\n/**\r\n * @license\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\nimport * as tfconv from '@tensorflow/tfjs-converter';\r\nimport * as tf from '@tensorflow/tfjs-core';\r\n\r\nimport {BaseModel} from './base_model';\r\nimport {decodeOnlyPartSegmentation, decodePartSegmentation, toMaskTensor} from './decode_part_map';\r\nimport {MobileNet} from './mobilenet';\r\nimport {decodePersonInstanceMasks, decodePersonInstancePartMasks} from './multi_person/decode_instance_masks';\r\nimport {decodeMultiplePoses} from './multi_person/decode_multiple_poses';\r\nimport {ResNet} from './resnet';\r\nimport {mobileNetSavedModel, resNet50SavedModel} from './saved_models';\r\nimport {BodyPixArchitecture, BodyPixInput, BodyPixInternalResolution, BodyPixMultiplier, BodyPixOutputStride, BodyPixQuantBytes, Padding} from './types';\r\nimport {PartSegmentation, PersonSegmentation, SemanticPartSegmentation, ExtendedSemanticPersonSegmentation} from './types';\r\nimport {getInputSize, padAndResizeTo, scaleAndCropToInputTensorShape, scaleAndFlipPoses, toInputResolutionHeightAndWidth, toTensorBuffers3D} from './util';\r\n\r\nconst APPLY_SIGMOID_ACTIVATION = true;\r\nconst FLIP_POSES_AFTER_SCALING = false;\r\n\r\n/**\r\n * BodyPix model loading is configurable using the following config dictionary.\r\n *\r\n * `architecture`: BodyPixArchitecture. It determines which BodyPix architecture\r\n * to load. The supported architectures are: MobileNetV1 and ResNet50.\r\n *\r\n * `outputStride`: Specifies the output stride of the BodyPix model.\r\n * The smaller the value, the larger the output resolution, and more accurate\r\n * the model at the cost of speed. Set this to a larger value to increase speed\r\n * at the cost of accuracy. Stride 32 is supported for ResNet and\r\n * stride 8,16,32 are supported for various MobileNetV1 models.\r\n *\r\n * `multiplier`: An optional number with values: 1.01, 1.0, 0.75, or\r\n * 0.50. The value is used only by MobileNet architecture. It is the float\r\n * multiplier for the depth (number of channels) for all convolution ops.\r\n * The larger the value, the larger the size of the layers, and more accurate\r\n * the model at the cost of speed. Set this to a smaller value to increase speed\r\n * at the cost of accuracy.\r\n *\r\n * `modelUrl`: An optional string that specifies custom url of the model. This\r\n * is useful for area/countries that don't have access to the model hosted on\r\n * GCP.\r\n *\r\n * `quantBytes`: An optional number with values: 1, 2, or 4.  This parameter\r\n * affects weight quantization in the models. The available options are\r\n * 1 byte, 2 bytes, and 4 bytes. The higher the value, the larger the model size\r\n * and thus the longer the loading time, the lower the value, the shorter the\r\n * loading time but lower the accuracy.\r\n */\r\nexport interface ModelConfig {\r\n  architecture: BodyPixArchitecture;\r\n  outputStride: BodyPixOutputStride;\r\n  multiplier?: BodyPixMultiplier;\r\n  modelUrl?: string;\r\n  quantBytes?: BodyPixQuantBytes;\r\n}\r\n\r\n// The default configuration for loading MobileNetV1 based BodyPix.\r\n//\r\n// (And for references, the default configuration for loading ResNet\r\n// based PoseNet is also included).\r\n//\r\n// ```\r\n// const RESNET_CONFIG = {\r\n//   architecture: 'ResNet50',\r\n//   outputStride: 32,\r\n//   quantBytes: 4,\r\n// } as ModelConfig;\r\n// ```\r\n\r\nconst MOBILENET_V1_CONFIG = {\r\n  architecture: 'MobileNetV1',\r\n  outputStride: 16,\r\n  quantBytes: 4,\r\n  multiplier: 0.75,\r\n} as ModelConfig;\r\n\r\nconst VALID_ARCHITECTURE: BodyPixArchitecture[] = ['MobileNetV1', 'ResNet50'];\r\nconst VALID_STRIDE: {[id: string]: BodyPixOutputStride[]} = {\r\n  'MobileNetV1': [8, 16, 32],\r\n  'ResNet50': [32, 16]\r\n};\r\nconst VALID_MULTIPLIER: {[id: string]: BodyPixMultiplier[]} = {\r\n  'MobileNetV1': [0.50, 0.75, 1.0],\r\n  'ResNet50': [1.0]\r\n};\r\nconst VALID_QUANT_BYTES: BodyPixQuantBytes[] = [1, 2, 4];\r\n\r\nfunction validateModelConfig(config: ModelConfig): ModelConfig {\r\n  config = config || MOBILENET_V1_CONFIG;\r\n\r\n  if (config.architecture == null) {\r\n    config.architecture = 'MobileNetV1';\r\n  }\r\n  if (VALID_ARCHITECTURE.indexOf(config.architecture) < 0) {\r\n    throw new Error(\r\n        `Invalid architecture ${config.architecture}. ` +\r\n        `Should be one of ${VALID_ARCHITECTURE}`);\r\n  }\r\n  if (config.outputStride == null) {\r\n    config.outputStride = 16;\r\n  }\r\n  if (VALID_STRIDE[config.architecture].indexOf(config.outputStride) < 0) {\r\n    throw new Error(\r\n        `Invalid outputStride ${config.outputStride}. ` +\r\n        `Should be one of ${VALID_STRIDE[config.architecture]} ` +\r\n        `for architecture ${config.architecture}.`);\r\n  }\r\n\r\n  if (config.multiplier == null) {\r\n    config.multiplier = 1.0;\r\n  }\r\n  if (VALID_MULTIPLIER[config.architecture].indexOf(config.multiplier) < 0) {\r\n    throw new Error(\r\n        `Invalid multiplier ${config.multiplier}. ` +\r\n        `Should be one of ${VALID_MULTIPLIER[config.architecture]} ` +\r\n        `for architecture ${config.architecture}.`);\r\n  }\r\n\r\n  if (config.quantBytes == null) {\r\n    config.quantBytes = 4;\r\n  }\r\n  if (VALID_QUANT_BYTES.indexOf(config.quantBytes) < 0) {\r\n    throw new Error(\r\n        `Invalid quantBytes ${config.quantBytes}. ` +\r\n        `Should be one of ${VALID_QUANT_BYTES} ` +\r\n        `for architecture ${config.architecture}.`);\r\n  }\r\n\r\n  return config;\r\n}\r\n\r\n/**\r\n * BodyPix inference is configurable using the following config dictionary.\r\n *\r\n * `flipHorizontal`: If the left-right keypoint of poses/part segmentation\r\n * should be flipped/mirrored horizontally. This should be set to true for\r\n * videos where the video is by default flipped horizontally (i.e. a webcam),\r\n * and you want the person & body part segmentation to be returned in the proper\r\n * orientation.\r\n *\r\n * `internalResolution`: Defaults to 'medium'. The internal resolution\r\n * percentage that the input is resized to before inference. The larger the\r\n * internalResolution the more accurate the model at the cost of slower\r\n * prediction times. Available values are 'low', 'medium', 'high', 'full', or a\r\n * percentage value between 0 and 1. The values 'low', 'medium', 'high', and\r\n * 'full' map to 0.25, 0.5, 0.75, and 1.0 correspondingly.\r\n *\r\n * `segmentationThreshold`: The minimum that segmentation values must\r\n * have to be considered part of the person. Affects the generation of the\r\n * segmentation mask. More specifically, it is the threshold used to binarize\r\n * the intermediate person segmentation probability. The probability of each\r\n * pixel belongs to a person is in range [0, 1]. If the probability is greater\r\n * than the `segmentationThreshold`, it will be set to 1 otherwise 0.\r\n *\r\n */\r\nexport interface InferenceConfig {\r\n  flipHorizontal?: boolean;\r\n  internalResolution?: BodyPixInternalResolution;\r\n  segmentationThreshold?: number;\r\n}\r\n\r\n/**\r\n * Person Inference Config\r\n *\r\n * `maxDetections`: Defaults to 10. Maximum number of person pose detections per\r\n * image.\r\n *\r\n * `scoreThreshold`: Defaults to 0.4. Only return person pose that have root\r\n * part score greater or equal to this value.\r\n *\r\n * `nmsRadius`: Defaults to 20. Non-maximum suppression part distance in pixels.\r\n * It needs to be strictly positive. Two pose keypoints suppress each other if\r\n * they are less than `nmsRadius` pixels away.\r\n */\r\nexport interface PersonInferenceConfig extends InferenceConfig {\r\n  maxDetections?: number;\r\n  scoreThreshold?: number;\r\n  nmsRadius?: number;\r\n}\r\n\r\n/**\r\n * Multiple Person Instance Inference Config\r\n *\r\n * `maxDetections`: Defaults to 10. Maximum number of returned instance\r\n * segmentation and pose detections per image.\r\n *\r\n * `scoreThreshold`: Defaults to 0.4. Only returns and uses person\r\n * poses for instance segmentation assignment when the pose has root part score\r\n * greater or equal to this value.\r\n *\r\n * `nmsRadius`: Defaults to 20. Non-maximum suppression part distance in pixels.\r\n * It needs to be strictly positive. Two parts suppress each other if they are\r\n * less than `nmsRadius` pixels away.\r\n *\r\n * `minKeypointScore`: Default to 0.3. Keypoints above the score are used\r\n * for matching and assigning segmentation mask to each person.\r\n *\r\n * `refineSteps`: Default to 10. The number of refinement steps used when\r\n * assigning the instance segmentation. It needs to be strictly positive. The\r\n * larger the higher the accuracy and slower the inference.\r\n *\r\n */\r\nexport interface MultiPersonInstanceInferenceConfig extends InferenceConfig {\r\n  maxDetections?: number;\r\n  scoreThreshold?: number;\r\n  nmsRadius?: number;\r\n  minKeypointScore?: number;\r\n  refineSteps?: number;\r\n}\r\n\r\nexport const PERSON_INFERENCE_CONFIG: PersonInferenceConfig = {\r\n  flipHorizontal: false,\r\n  internalResolution: 'medium',\r\n  segmentationThreshold: 0.7,\r\n  maxDetections: 10,\r\n  scoreThreshold: 0.4,\r\n  nmsRadius: 20,\r\n};\r\n\r\nexport const MULTI_PERSON_INSTANCE_INFERENCE_CONFIG:\r\n    MultiPersonInstanceInferenceConfig = {\r\n      flipHorizontal: false,\r\n      internalResolution: 'medium',\r\n      segmentationThreshold: 0.7,\r\n      maxDetections: 10,\r\n      scoreThreshold: 0.4,\r\n      nmsRadius: 20,\r\n      minKeypointScore: 0.3,\r\n      refineSteps: 10\r\n    };\r\n\r\nfunction validatePersonInferenceConfig(config: PersonInferenceConfig) {\r\n  const {segmentationThreshold, maxDetections, scoreThreshold, nmsRadius} =\r\n      config;\r\n\r\n  if (segmentationThreshold < 0.0 || segmentationThreshold > 1.0) {\r\n    throw new Error(\r\n        `segmentationThreshold ${segmentationThreshold}. ` +\r\n        `Should be in range [0.0, 1.0]`);\r\n  }\r\n\r\n  if (maxDetections <= 0) {\r\n    throw new Error(\r\n        `Invalid maxDetections ${maxDetections}. ` +\r\n        `Should be > 0`);\r\n  }\r\n\r\n  if (scoreThreshold < 0.0 || scoreThreshold > 1.0) {\r\n    throw new Error(\r\n        `Invalid scoreThreshold ${scoreThreshold}. ` +\r\n        `Should be in range [0.0, 1.0]`);\r\n  }\r\n\r\n  if (nmsRadius <= 0) {\r\n    throw new Error(`Invalid nmsRadius ${nmsRadius}.`);\r\n  }\r\n}\r\n\r\nfunction validateMultiPersonInstanceInferenceConfig(\r\n    config: MultiPersonInstanceInferenceConfig) {\r\n  const {\r\n    segmentationThreshold,\r\n    maxDetections,\r\n    scoreThreshold,\r\n    nmsRadius,\r\n    minKeypointScore,\r\n    refineSteps\r\n  } = config;\r\n\r\n  if (segmentationThreshold < 0.0 || segmentationThreshold > 1.0) {\r\n    throw new Error(\r\n        `segmentationThreshold ${segmentationThreshold}. ` +\r\n        `Should be in range [0.0, 1.0]`);\r\n  }\r\n\r\n  if (maxDetections <= 0) {\r\n    throw new Error(\r\n        `Invalid maxDetections ${maxDetections}. ` +\r\n        `Should be > 0`);\r\n  }\r\n\r\n  if (scoreThreshold < 0.0 || scoreThreshold > 1.0) {\r\n    throw new Error(\r\n        `Invalid scoreThreshold ${scoreThreshold}. ` +\r\n        `Should be in range [0.0, 1.0]`);\r\n  }\r\n\r\n  if (nmsRadius <= 0) {\r\n    throw new Error(`Invalid nmsRadius ${nmsRadius}.`);\r\n  }\r\n\r\n  if (minKeypointScore < 0 || minKeypointScore > 1) {\r\n    throw new Error(\r\n        `Invalid minKeypointScore ${minKeypointScore}.` +\r\n        `Should be in range [0.0, 1.0]`);\r\n  }\r\n\r\n  if (refineSteps <= 0 || refineSteps > 20) {\r\n    throw new Error(\r\n        `Invalid refineSteps ${refineSteps}.` +\r\n        `Should be in range [1, 20]`);\r\n  }\r\n}\r\n\r\nexport class BodyPix {\r\n  baseModel: BaseModel;\r\n\r\n  constructor(net: BaseModel) {\r\n    this.baseModel = net;\r\n  }\r\n\r\n  private predictForPersonSegmentation(input: tf.Tensor3D): {\r\n    segmentLogits: tf.Tensor3D,\r\n    heatmapScores: tf.Tensor3D,\r\n    offsets: tf.Tensor3D,\r\n    displacementFwd: tf.Tensor3D,\r\n    displacementBwd: tf.Tensor3D,\r\n  } {\r\n    const {\r\n      segmentation,\r\n      heatmapScores,\r\n      offsets,\r\n      displacementFwd,\r\n      displacementBwd,\r\n    } = this.baseModel.predict(input);\r\n    return {\r\n      segmentLogits: segmentation,\r\n      heatmapScores,\r\n      offsets,\r\n      displacementFwd,\r\n      displacementBwd,\r\n    };\r\n  }\r\n\r\n  private predictForPersonSegmentationAndPart(input: tf.Tensor3D): {\r\n    segmentLogits: tf.Tensor3D,\r\n    partHeatmapLogits: tf.Tensor3D,\r\n    heatmapScores: tf.Tensor3D,\r\n    offsets: tf.Tensor3D,\r\n    displacementFwd: tf.Tensor3D,\r\n    displacementBwd: tf.Tensor3D,\r\n  } {\r\n    const {\r\n      segmentation,\r\n      partHeatmaps,\r\n      heatmapScores,\r\n      offsets,\r\n      displacementFwd,\r\n      displacementBwd\r\n    } = this.baseModel.predict(input);\r\n    return {\r\n      segmentLogits: segmentation,\r\n      partHeatmapLogits: partHeatmaps,\r\n      heatmapScores,\r\n      offsets,\r\n      displacementFwd,\r\n      displacementBwd,\r\n    };\r\n  }\r\n\r\n  private predictForMultiPersonInstanceSegmentationAndPart(input: tf.Tensor3D):\r\n      {\r\n        segmentLogits: tf.Tensor3D,\r\n        longOffsets: tf.Tensor3D,\r\n        heatmapScores: tf.Tensor3D,\r\n        offsets: tf.Tensor3D,\r\n        displacementFwd: tf.Tensor3D,\r\n        displacementBwd: tf.Tensor3D,\r\n        partHeatmaps: tf.Tensor3D\r\n      } {\r\n    const {\r\n      segmentation,\r\n      longOffsets,\r\n      heatmapScores,\r\n      offsets,\r\n      displacementFwd,\r\n      displacementBwd,\r\n      partHeatmaps,\r\n    } = this.baseModel.predict(input);\r\n    return {\r\n      segmentLogits: segmentation,\r\n      longOffsets,\r\n      heatmapScores,\r\n      offsets,\r\n      displacementFwd,\r\n      displacementBwd,\r\n      partHeatmaps\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Given an image with people, returns a dictionary of all intermediate\r\n   * tensors including: 1) a binary array with 1 for the pixels that are part of\r\n   * the person, and 0 otherwise, 2) heatmapScores, 3) offsets, and 4) paddings.\r\n   *\r\n   * @param input ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement)\r\n   * The input image to feed through the network.\r\n   *\r\n   * @param internalResolution Defaults to 'medium'. The internal resolution\r\n   * that the input is resized to before inference. The larger the\r\n   * internalResolution the more accurate the model at the cost of slower\r\n   * prediction times. Available values are 'low', 'medium', 'high', 'full', or\r\n   * a percentage value between 0 and 1. The values 'low', 'medium', 'high', and\r\n   * 'full' map to 0.25, 0.5, 0.75, and 1.0 correspondingly.\r\n   *\r\n   * @param segmentationThreshold The minimum that segmentation values must have\r\n   * to be considered part of the person. Affects the generation of the\r\n   * segmentation mask.\r\n   *\r\n   * @return A dictionary containing `segmentation`, `heatmapScores`, `offsets`,\r\n   * and `padding`:\r\n   * - `segmentation`: A 2d Tensor with 1 for the pixels that are part of the\r\n   * person, and 0 otherwise. The width and height correspond to the same\r\n   * dimensions of the input image.\r\n   * - `heatmapScores`: A 3d Tensor of the keypoint heatmaps used by\r\n   * pose estimation decoding.\r\n   * - `offsets`: A 3d Tensor of the keypoint offsets used by pose\r\n   * estimation decoding.\r\n   * - `displacementFwd`: A 3d Tensor of the keypoint forward displacement used\r\n   * by pose estimation decoding.\r\n   * - `displacementBwd`: A 3d Tensor of the keypoint backward displacement used\r\n   * by pose estimation decoding.\r\n   * - `padding`: The padding (unit pixels) being applied to the input image\r\n   * before it is fed into the model.\r\n   */\r\n  segmentPersonActivation(\r\n      input: BodyPixInput, internalResolution: BodyPixInternalResolution,\r\n      segmentationThreshold = 0.5): {\r\n    segmentation: tf.Tensor2D,\r\n    segmentationScores: tf.Tensor2D,\r\n    heatmapScores: tf.Tensor3D,\r\n    offsets: tf.Tensor3D,\r\n    displacementFwd: tf.Tensor3D,\r\n    displacementBwd: tf.Tensor3D,\r\n    padding: Padding,\r\n    internalResolutionHeightAndWidth: [number, number]\r\n  } {\r\n    const [height, width] = getInputSize(input);\r\n    const internalResolutionHeightAndWidth = toInputResolutionHeightAndWidth(\r\n        internalResolution, this.baseModel.outputStride, [height, width]);\r\n    const {resized, padding} =\r\n        padAndResizeTo(input, internalResolutionHeightAndWidth);\r\n\r\n    const {\r\n      segmentationScores,\r\n      segmentation,\r\n      heatmapScores,\r\n      offsets,\r\n      displacementFwd,\r\n      displacementBwd\r\n    } = tf.tidy(() => {\r\n      const {\r\n        segmentLogits,\r\n        heatmapScores,\r\n        offsets,\r\n        displacementFwd,\r\n        displacementBwd\r\n      } = this.predictForPersonSegmentation(resized);\r\n\r\n      const [resizedHeight, resizedWidth] = resized.shape;\r\n\r\n      const scaledSegmentScores = scaleAndCropToInputTensorShape(\r\n          segmentLogits, [height, width], [resizedHeight, resizedWidth],\r\n          [[padding.top, padding.bottom], [padding.left, padding.right]],\r\n          APPLY_SIGMOID_ACTIVATION);\r\n      const segmentationScores = scaledSegmentScores.squeeze() as tf.Tensor2D;\r\n      return {\r\n        segmentationScores,\r\n        segmentation:\r\n            toMaskTensor(segmentationScores, segmentationThreshold),\r\n        heatmapScores,\r\n        offsets,\r\n        displacementFwd,\r\n        displacementBwd,\r\n      };\r\n    });\r\n    resized.dispose();\r\n    return {\r\n      segmentationScores,\r\n      segmentation,\r\n      heatmapScores,\r\n      offsets,\r\n      displacementFwd,\r\n      displacementBwd,\r\n      padding,\r\n      internalResolutionHeightAndWidth\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Given an image with many people, returns a PersonSegmentation dictionary\r\n   * that contains the segmentation mask for all people and a single pose.\r\n   *\r\n   * Note: The segmentation mask returned by this method covers all people but\r\n   * the pose works well for one person. If you want to estimate instance-level\r\n   * multiple person segmentation & pose for each person, use\r\n   * `segmentMultiPerson` instead.\r\n   *\r\n   * @param input ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement)\r\n   * The input image to feed through the network.\r\n   *\r\n   * @param config PersonInferenceConfig object that contains\r\n   * parameters for the BodyPix inference using person decoding.\r\n   *\r\n   * @return A SemanticPersonSegmentation dictionary that contains height,\r\n   * width, the flattened binary segmentation mask and the poses for all people.\r\n   * The width and height correspond to the same dimensions of the input image.\r\n   * - `height`: The height of the segmentation data in pixel unit.\r\n   * - `width`: The width of the segmentation data in pixel unit.\r\n   * - `data`: The flattened Uint8Array of segmentation data. 1 means the pixel\r\n   * belongs to a person and 0 means the pixel doesn't belong to a person. The\r\n   * size of the array is equal to `height` x `width` in row-major order.\r\n   * - `allPoses`: The 2d poses of all people.\r\n   */\r\n  async segmentPerson(\r\n      input: BodyPixInput,\r\n      config: PersonInferenceConfig = PERSON_INFERENCE_CONFIG):\r\n      Promise<ExtendedSemanticPersonSegmentation> {\r\n    config = {...PERSON_INFERENCE_CONFIG, ...config};\r\n\r\n    validatePersonInferenceConfig(config);\r\n\r\n    const {\r\n      segmentationScores,\r\n      segmentation,\r\n      heatmapScores,\r\n      offsets,\r\n      displacementFwd,\r\n      displacementBwd,\r\n      padding,\r\n      internalResolutionHeightAndWidth\r\n    } =\r\n        this.segmentPersonActivation(\r\n            input, config.internalResolution, config.segmentationThreshold);\r\n\r\n    const [height, width] = segmentation.shape;\r\n\r\n    const result = await segmentation.data() as Uint8Array;\r\n    segmentation.dispose();\r\n    const scores = await segmentationScores.data() as Float32Array;\r\n    segmentationScores.dispose();\r\n\r\n    const tensorBuffers = await toTensorBuffers3D(\r\n        [heatmapScores, offsets, displacementFwd, displacementBwd]);\r\n    const [scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf] =\r\n        tensorBuffers;\r\n\r\n    let poses = decodeMultiplePoses(\r\n        scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf,\r\n        this.baseModel.outputStride, config.maxDetections,\r\n        config.scoreThreshold, config.nmsRadius);\r\n\r\n    poses = scaleAndFlipPoses(\r\n        poses, [height, width], internalResolutionHeightAndWidth, padding,\r\n        FLIP_POSES_AFTER_SCALING);\r\n\r\n    heatmapScores.dispose();\r\n    offsets.dispose();\r\n    displacementFwd.dispose();\r\n    displacementBwd.dispose();\r\n\r\n    return {height, width, data: result, scores, allPoses: poses};\r\n  }\r\n\r\n  /**\r\n   * Given an image with multiple people, returns an *array* of\r\n   * PersonSegmentation object. Each element in the array corresponding to one\r\n   * of the people in the input image. In other words, it predicts\r\n   * instance-level multiple person segmentation & pose for each person.\r\n   *\r\n   * The model does standard ImageNet pre-processing before inferring through\r\n   * the model. The image pixels should have values [0-255].\r\n   *\r\n   * @param input\r\n   * ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement) The input\r\n   * image to feed through the network.\r\n   *\r\n   * @param config MultiPersonInferenceConfig object that contains\r\n   * parameters for the BodyPix inference using multi-person decoding.\r\n   *\r\n   * @return An array of PersonSegmentation object, each containing a width,\r\n   * height, a binary array (1 for the pixels that are part of the\r\n   * person, and 0 otherwise) and 2D pose. The array size corresponds to the\r\n   * number of pixels in the image. The width and height correspond to the\r\n   * dimensions of the image the binary array is shaped to, which are the same\r\n   * dimensions of the input image.\r\n   */\r\n  async segmentMultiPerson(\r\n      input: BodyPixInput,\r\n      config: MultiPersonInstanceInferenceConfig =\r\n          MULTI_PERSON_INSTANCE_INFERENCE_CONFIG):\r\n      Promise<PersonSegmentation[]> {\r\n    config = {...MULTI_PERSON_INSTANCE_INFERENCE_CONFIG, ...config};\r\n    validateMultiPersonInstanceInferenceConfig(config);\r\n    const [height, width] = getInputSize(input);\r\n    const internalResolutionHeightAndWidth = toInputResolutionHeightAndWidth(\r\n        config.internalResolution, this.baseModel.outputStride,\r\n        [height, width]);\r\n\r\n    const {resized, padding} =\r\n        padAndResizeTo(input, internalResolutionHeightAndWidth);\r\n    const {\r\n      segmentation,\r\n      longOffsets,\r\n      heatmapScoresRaw,\r\n      offsetsRaw,\r\n      displacementFwdRaw,\r\n      displacementBwdRaw,\r\n    } = tf.tidy(() => {\r\n      const {\r\n        segmentLogits,\r\n        longOffsets,\r\n        heatmapScores,\r\n        offsets,\r\n        displacementFwd,\r\n        displacementBwd,\r\n      } = this.predictForMultiPersonInstanceSegmentationAndPart(resized);\r\n      const scaledSegmentScores = scaleAndCropToInputTensorShape(\r\n          segmentLogits, [height, width], internalResolutionHeightAndWidth,\r\n          [[padding.top, padding.bottom], [padding.left, padding.right]],\r\n          APPLY_SIGMOID_ACTIVATION);\r\n      const longOffsetsResized = false;\r\n      let scaledLongOffsets;\r\n      if (longOffsetsResized) {\r\n        scaledLongOffsets = scaleAndCropToInputTensorShape(\r\n            longOffsets, [height, width], internalResolutionHeightAndWidth,\r\n            [[padding.top, padding.bottom], [padding.left, padding.right]],\r\n            APPLY_SIGMOID_ACTIVATION);\r\n      } else {\r\n        scaledLongOffsets = longOffsets;\r\n      }\r\n\r\n      const segmentation = toMaskTensor(\r\n          scaledSegmentScores.squeeze(), config.segmentationThreshold);\r\n\r\n      return {\r\n        segmentation,\r\n        longOffsets: scaledLongOffsets,\r\n        heatmapScoresRaw: heatmapScores,\r\n        offsetsRaw: offsets,\r\n        displacementFwdRaw: displacementFwd,\r\n        displacementBwdRaw: displacementBwd,\r\n      };\r\n    });\r\n\r\n    const tensorBuffers = await toTensorBuffers3D(\r\n        [heatmapScoresRaw, offsetsRaw, displacementFwdRaw, displacementBwdRaw]);\r\n    const [scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf] =\r\n        tensorBuffers;\r\n\r\n    let poses = decodeMultiplePoses(\r\n        scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf,\r\n        this.baseModel.outputStride, config.maxDetections,\r\n        config.scoreThreshold, config.nmsRadius);\r\n\r\n    poses = scaleAndFlipPoses(\r\n        poses, [height, width], internalResolutionHeightAndWidth, padding,\r\n        FLIP_POSES_AFTER_SCALING);\r\n\r\n    const instanceMasks = await decodePersonInstanceMasks(\r\n        segmentation, longOffsets, poses, height, width,\r\n        this.baseModel.outputStride, internalResolutionHeightAndWidth, padding,\r\n        config.scoreThreshold, config.refineSteps, config.minKeypointScore,\r\n        config.maxDetections);\r\n\r\n    resized.dispose();\r\n    segmentation.dispose();\r\n    longOffsets.dispose();\r\n    heatmapScoresRaw.dispose();\r\n    offsetsRaw.dispose();\r\n    displacementFwdRaw.dispose();\r\n    displacementBwdRaw.dispose();\r\n\r\n    return instanceMasks;\r\n  }\r\n\r\n  /**\r\n   * Given an image with many people, returns a dictionary containing: height,\r\n   * width, a tensor with a part id from 0-24 for the pixels that are\r\n   * part of a corresponding body part, and -1 otherwise. This does standard\r\n   * ImageNet pre-processing before inferring through the model.  The image\r\n   * should pixels should have values [0-255].\r\n   *\r\n   * @param input ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement)\r\n   * The input image to feed through the network.\r\n   *\r\n   * @param internalResolution Defaults to 'medium'. The internal resolution\r\n   * percentage that the input is resized to before inference. The larger the\r\n   * internalResolution the more accurate the model at the cost of slower\r\n   * prediction times. Available values are 'low', 'medium', 'high', 'full', or\r\n   * a percentage value between 0 and 1. The values 'low', 'medium', 'high', and\r\n   * 'full' map to 0.25, 0.5, 0.75, and 1.0 correspondingly.\r\n   *\r\n   * @param segmentationThreshold The minimum that segmentation values must have\r\n   * to be considered part of the person.  Affects the clipping of the colored\r\n   * part image.\r\n   *\r\n   * @return  A dictionary containing `partSegmentation`, `heatmapScores`,\r\n   * `offsets`, and `padding`:\r\n   * - `partSegmentation`: A 2d Tensor with a part id from 0-24 for\r\n   * the pixels that are part of a corresponding body part, and -1 otherwise.\r\n   * - `heatmapScores`: A 3d Tensor of the keypoint heatmaps used by\r\n   * single-person pose estimation decoding.\r\n   * - `offsets`: A 3d Tensor of the keypoint offsets used by single-person pose\r\n   * estimation decoding.\r\n   * - `displacementFwd`: A 3d Tensor of the keypoint forward displacement\r\n   * used by pose estimation decoding.\r\n   * - `displacementBwd`: A 3d Tensor of the keypoint backward displacement used\r\n   * by pose estimation decoding.\r\n   * - `padding`: The padding (unit pixels) being applied to the input image\r\n   * before it is fed into the model.\r\n   */\r\n  segmentPersonPartsActivation(\r\n      input: BodyPixInput, internalResolution: BodyPixInternalResolution,\r\n      segmentationThreshold = 0.5): {\r\n    partSegmentation: tf.Tensor2D,\r\n    heatmapScores: tf.Tensor3D,\r\n    offsets: tf.Tensor3D,\r\n    displacementFwd: tf.Tensor3D,\r\n    displacementBwd: tf.Tensor3D,\r\n    padding: Padding,\r\n    internalResolutionHeightAndWidth: [number, number]\r\n  } {\r\n    const [height, width] = getInputSize(input);\r\n    const internalResolutionHeightAndWidth = toInputResolutionHeightAndWidth(\r\n        internalResolution, this.baseModel.outputStride, [height, width]);\r\n    const {\r\n      resized,\r\n      padding,\r\n    } = padAndResizeTo(input, internalResolutionHeightAndWidth);\r\n\r\n    const {\r\n      partSegmentation,\r\n      heatmapScores,\r\n      offsets,\r\n      displacementFwd,\r\n      displacementBwd\r\n    } = tf.tidy(() => {\r\n      const {\r\n        segmentLogits,\r\n        partHeatmapLogits,\r\n        heatmapScores,\r\n        offsets,\r\n        displacementFwd,\r\n        displacementBwd\r\n      } = this.predictForPersonSegmentationAndPart(resized);\r\n\r\n      const [resizedHeight, resizedWidth] = resized.shape;\r\n\r\n      const scaledSegmentScores = scaleAndCropToInputTensorShape(\r\n          segmentLogits, [height, width], [resizedHeight, resizedWidth],\r\n          [[padding.top, padding.bottom], [padding.left, padding.right]],\r\n          APPLY_SIGMOID_ACTIVATION);\r\n\r\n      const scaledPartHeatmapScore = scaleAndCropToInputTensorShape(\r\n          partHeatmapLogits, [height, width], [resizedHeight, resizedWidth],\r\n          [[padding.top, padding.bottom], [padding.left, padding.right]],\r\n          APPLY_SIGMOID_ACTIVATION);\r\n      const segmentation =\r\n          toMaskTensor(scaledSegmentScores.squeeze(), segmentationThreshold);\r\n      return {\r\n        partSegmentation:\r\n            decodePartSegmentation(segmentation, scaledPartHeatmapScore),\r\n        heatmapScores,\r\n        offsets,\r\n        displacementFwd,\r\n        displacementBwd,\r\n      };\r\n    });\r\n    resized.dispose();\r\n    return {\r\n      partSegmentation,\r\n      heatmapScores,\r\n      offsets,\r\n      displacementFwd,\r\n      displacementBwd,\r\n      padding,\r\n      internalResolutionHeightAndWidth\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Given an image with many people, returns a PartSegmentation dictionary that\r\n   * contains the body part segmentation mask for all people and a single pose.\r\n   *\r\n   * Note: The body part segmentation mask returned by this method covers all\r\n   * people but the pose works well when there is one person. If you want to\r\n   * estimate instance-level multiple person body part segmentation & pose for\r\n   * each person, use `segmentMultiPersonParts` instead.\r\n   *\r\n   * @param input ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement)\r\n   * The input image to feed through the network.\r\n   *\r\n   * @param config PersonInferenceConfig object that contains\r\n   * parameters for the BodyPix inference using single person decoding.\r\n   *\r\n   * @return A SemanticPartSegmentation dictionary that contains height, width,\r\n   * the flattened binary segmentation mask and the pose for the person. The\r\n   * width and height correspond to the same dimensions of the input image.\r\n   * - `height`: The height of the person part segmentation data in pixel unit.\r\n   * - `width`: The width of the person part segmentation data in pixel unit.\r\n   * - `data`: The flattened Int32Array of person part segmentation data with a\r\n   * part id from 0-24 for the pixels that are part of a corresponding body\r\n   * part, and -1 otherwise. The size of the array is equal to `height` x\r\n   * `width` in row-major order.\r\n   * - `allPoses`: The 2d poses of all people.\r\n   */\r\n  async segmentPersonParts(\r\n      input: BodyPixInput,\r\n      config: PersonInferenceConfig = PERSON_INFERENCE_CONFIG):\r\n      Promise<SemanticPartSegmentation> {\r\n    config = {...PERSON_INFERENCE_CONFIG, ...config};\r\n\r\n    validatePersonInferenceConfig(config);\r\n    const {\r\n      partSegmentation,\r\n      heatmapScores,\r\n      offsets,\r\n      displacementFwd,\r\n      displacementBwd,\r\n      padding,\r\n      internalResolutionHeightAndWidth\r\n    } =\r\n        this.segmentPersonPartsActivation(\r\n            input, config.internalResolution, config.segmentationThreshold);\r\n\r\n    const [height, width] = partSegmentation.shape;\r\n    const data = await partSegmentation.data() as Int32Array;\r\n    partSegmentation.dispose();\r\n\r\n    const tensorBuffers = await toTensorBuffers3D(\r\n        [heatmapScores, offsets, displacementFwd, displacementBwd]);\r\n    const [scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf] =\r\n        tensorBuffers;\r\n\r\n    let poses = decodeMultiplePoses(\r\n        scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf,\r\n        this.baseModel.outputStride, config.maxDetections,\r\n        config.scoreThreshold, config.nmsRadius);\r\n\r\n    poses = scaleAndFlipPoses(\r\n        poses, [height, width], internalResolutionHeightAndWidth, padding,\r\n        FLIP_POSES_AFTER_SCALING);\r\n\r\n    heatmapScores.dispose();\r\n    offsets.dispose();\r\n    displacementFwd.dispose();\r\n    displacementBwd.dispose();\r\n\r\n    return {height, width, data, allPoses: poses};\r\n  }\r\n\r\n  /**\r\n   * Given an image with multiple people, returns an *array* of PartSegmentation\r\n   * object. Each element in the array corresponding to one\r\n   * of the people in the input image. In other words, it predicts\r\n   * instance-level multiple person body part segmentation & pose for each\r\n   * person.\r\n   *\r\n   * This does standard ImageNet pre-processing before inferring through\r\n   * the model. The image pixels should have values [0-255].\r\n   *\r\n   * @param input\r\n   * ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement) The input\r\n   * image to feed through the network.\r\n   *\r\n   * @param config MultiPersonInferenceConfig object that contains\r\n   * parameters for the BodyPix inference using multi-person decoding.\r\n   *\r\n   * @return An array of PartSegmentation object, each containing a width,\r\n   * height, a flattened array (with part id from 0-24 for the pixels that are\r\n   * part of a corresponding body part, and -1 otherwise) and 2D pose. The width\r\n   * and height correspond to the dimensions of the image. Each flattened part\r\n   * segmentation array size is equal to `height` x `width`.\r\n   */\r\n  async segmentMultiPersonParts(\r\n      input: BodyPixInput,\r\n      config: MultiPersonInstanceInferenceConfig =\r\n          MULTI_PERSON_INSTANCE_INFERENCE_CONFIG): Promise<PartSegmentation[]> {\r\n    config = {...MULTI_PERSON_INSTANCE_INFERENCE_CONFIG, ...config};\r\n\r\n    validateMultiPersonInstanceInferenceConfig(config);\r\n    const [height, width] = getInputSize(input);\r\n    const internalResolutionHeightAndWidth = toInputResolutionHeightAndWidth(\r\n        config.internalResolution, this.baseModel.outputStride,\r\n        [height, width]);\r\n    const {resized, padding} =\r\n        padAndResizeTo(input, internalResolutionHeightAndWidth);\r\n    const {\r\n      segmentation,\r\n      longOffsets,\r\n      heatmapScoresRaw,\r\n      offsetsRaw,\r\n      displacementFwdRaw,\r\n      displacementBwdRaw,\r\n      partSegmentation,\r\n    } = tf.tidy(() => {\r\n      const {\r\n        segmentLogits,\r\n        longOffsets,\r\n        heatmapScores,\r\n        offsets,\r\n        displacementFwd,\r\n        displacementBwd,\r\n        partHeatmaps\r\n      } = this.predictForMultiPersonInstanceSegmentationAndPart(resized);\r\n\r\n      // decoding with scaling.\r\n      const scaledSegmentScores = scaleAndCropToInputTensorShape(\r\n          segmentLogits, [height, width], internalResolutionHeightAndWidth,\r\n          [[padding.top, padding.bottom], [padding.left, padding.right]],\r\n          APPLY_SIGMOID_ACTIVATION);\r\n\r\n      // decoding with scaling.\r\n      const scaledPartSegmentationScores = scaleAndCropToInputTensorShape(\r\n          partHeatmaps, [height, width], internalResolutionHeightAndWidth,\r\n          [[padding.top, padding.bottom], [padding.left, padding.right]],\r\n          APPLY_SIGMOID_ACTIVATION);\r\n\r\n      const scaledLongOffsets = longOffsets;\r\n      const segmentation = toMaskTensor(\r\n          scaledSegmentScores.squeeze(), config.segmentationThreshold);\r\n      const partSegmentation =\r\n          decodeOnlyPartSegmentation(scaledPartSegmentationScores);\r\n      return {\r\n        segmentation,\r\n        longOffsets: scaledLongOffsets,\r\n        heatmapScoresRaw: heatmapScores,\r\n        offsetsRaw: offsets,\r\n        displacementFwdRaw: displacementFwd,\r\n        displacementBwdRaw: displacementBwd,\r\n        partSegmentation\r\n      };\r\n    });\r\n\r\n    const tensorBuffers = await toTensorBuffers3D(\r\n        [heatmapScoresRaw, offsetsRaw, displacementFwdRaw, displacementBwdRaw]);\r\n    const [scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf] =\r\n        tensorBuffers;\r\n\r\n    let poses = decodeMultiplePoses(\r\n        scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf,\r\n        this.baseModel.outputStride, config.maxDetections,\r\n        config.scoreThreshold, config.nmsRadius);\r\n\r\n    poses = scaleAndFlipPoses(\r\n        poses, [height, width], internalResolutionHeightAndWidth, padding,\r\n        FLIP_POSES_AFTER_SCALING);\r\n\r\n    const instanceMasks = await decodePersonInstancePartMasks(\r\n        segmentation, longOffsets, partSegmentation, poses, height, width,\r\n        this.baseModel.outputStride, internalResolutionHeightAndWidth, padding,\r\n        config.scoreThreshold, config.refineSteps, config.minKeypointScore,\r\n        config.maxDetections);\r\n\r\n    resized.dispose();\r\n    segmentation.dispose();\r\n    longOffsets.dispose();\r\n    heatmapScoresRaw.dispose();\r\n    offsetsRaw.dispose();\r\n    displacementFwdRaw.dispose();\r\n    displacementBwdRaw.dispose();\r\n    partSegmentation.dispose();\r\n\r\n    return instanceMasks;\r\n  }\r\n\r\n  public dispose() {\r\n    this.baseModel.dispose();\r\n  }\r\n}\r\n\r\n/**\r\n * Loads the MobileNet BodyPix model.\r\n */\r\nasync function loadMobileNet(config: ModelConfig): Promise<BodyPix> {\r\n  const outputStride = config.outputStride;\r\n  const quantBytes = config.quantBytes;\r\n  const multiplier = config.multiplier;\r\n  if (tf == null) {\r\n    throw new Error(\r\n        `Cannot find TensorFlow.js. If you are using a <script> tag, please ` +\r\n        `also include @tensorflow/tfjs on the page before using this\r\n        model.`);\r\n  }\r\n\r\n  const url = mobileNetSavedModel(outputStride, multiplier, quantBytes);\r\n  const graphModel = await tfconv.loadGraphModel(config.modelUrl || url);\r\n  const mobilenet = new MobileNet(graphModel, outputStride);\r\n  return new BodyPix(mobilenet);\r\n}\r\n\r\n/**\r\n * Loads the ResNet BodyPix model.\r\n */\r\nasync function loadResNet(config: ModelConfig): Promise<BodyPix> {\r\n  const outputStride = config.outputStride;\r\n  const quantBytes = config.quantBytes;\r\n  if (tf == null) {\r\n    throw new Error(\r\n        `Cannot find TensorFlow.js. If you are using a <script> tag, please ` +\r\n        `also include @tensorflow/tfjs on the page before using this\r\n        model.`);\r\n  }\r\n\r\n  const url = resNet50SavedModel(outputStride, quantBytes);\r\n  const graphModel = await tfconv.loadGraphModel(config.modelUrl || url);\r\n  const resnet = new ResNet(graphModel, outputStride);\r\n  return new BodyPix(resnet);\r\n}\r\n\r\n/**\r\n * Loads the BodyPix model instance from a checkpoint, with the ResNet\r\n * or MobileNet architecture. The model to be loaded is configurable using the\r\n * config dictionary ModelConfig. Please find more details in the\r\n * documentation of the ModelConfig.\r\n *\r\n * @param config ModelConfig dictionary that contains parameters for\r\n * the BodyPix loading process. Please find more details of each parameters\r\n * in the documentation of the ModelConfig interface. The predefined\r\n * `MOBILENET_V1_CONFIG` and `RESNET_CONFIG` can also be used as references\r\n * for defining your customized config.\r\n */\r\nexport async function load(config: ModelConfig = MOBILENET_V1_CONFIG):\r\n    Promise<BodyPix> {\r\n  config = validateModelConfig(config);\r\n  if (config.architecture === 'ResNet50') {\r\n    return loadResNet(config);\r\n  } else if (config.architecture === 'MobileNetV1') {\r\n    return loadMobileNet(config);\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\nimport {cpuBlur} from './blur';\r\nimport {Color, PartSegmentation, PersonSegmentation} from './types';\r\nimport {SemanticPartSegmentation, SemanticPersonSegmentation} from './types';\r\nimport {getInputSize} from './util';\r\n\r\nconst offScreenCanvases: {[name: string]: HTMLCanvasElement} = {};\r\n\r\ntype ImageType = HTMLImageElement|HTMLVideoElement|HTMLCanvasElement;\r\ntype HasDimensions = {\r\n  width: number,\r\n  height: number\r\n};\r\n\r\nfunction isSafari() {\r\n  return (/^((?!chrome|android).)*safari/i.test(navigator.userAgent));\r\n}\r\n\r\nfunction assertSameDimensions(\r\n    {width: widthA, height: heightA}: HasDimensions,\r\n    {width: widthB, height: heightB}: HasDimensions, nameA: string,\r\n    nameB: string) {\r\n  if (widthA !== widthB || heightA !== heightB) {\r\n    throw new Error(`error: dimensions must match. ${nameA} has dimensions ${\r\n        widthA}x${heightA}, ${nameB} has dimensions ${widthB}x${heightB}`);\r\n  }\r\n}\r\n\r\nfunction flipCanvasHorizontal(canvas: HTMLCanvasElement) {\r\n  const ctx = canvas.getContext('2d');\r\n  ctx.scale(-1, 1);\r\n  ctx.translate(-canvas.width, 0);\r\n}\r\n\r\nfunction drawWithCompositing(\r\n    ctx: CanvasRenderingContext2D, image: HTMLCanvasElement|ImageType,\r\n    compositOperation: string) {\r\n  ctx.globalCompositeOperation = compositOperation;\r\n  ctx.drawImage(image, 0, 0);\r\n}\r\n\r\nfunction createOffScreenCanvas(): HTMLCanvasElement {\r\n  const offScreenCanvas = document.createElement('canvas');\r\n  return offScreenCanvas;\r\n}\r\n\r\nfunction ensureOffscreenCanvasCreated(id: string): HTMLCanvasElement {\r\n  if (!offScreenCanvases[id]) {\r\n    offScreenCanvases[id] = createOffScreenCanvas();\r\n  }\r\n  return offScreenCanvases[id];\r\n}\r\n\r\nfunction drawAndBlurImageOnCanvas(\r\n    image: ImageType, blurAmount: number, canvas: HTMLCanvasElement) {\r\n  const {height, width} = image;\r\n  const ctx = canvas.getContext('2d');\r\n  canvas.width = width;\r\n  canvas.height = height;\r\n  ctx.clearRect(0, 0, width, height);\r\n  ctx.save();\r\n  if (isSafari()) {\r\n    cpuBlur(canvas, image, blurAmount);\r\n  } else {\r\n    // tslint:disable:no-any\r\n    (ctx as any).filter = `blur(${blurAmount}px)`;\r\n    ctx.drawImage(image, 0, 0, width, height);\r\n  }\r\n  ctx.restore();\r\n}\r\n\r\nfunction drawAndBlurImageOnOffScreenCanvas(\r\n    image: ImageType, blurAmount: number,\r\n    offscreenCanvasName: string): HTMLCanvasElement {\r\n  const canvas = ensureOffscreenCanvasCreated(offscreenCanvasName);\r\n  if (blurAmount === 0) {\r\n    renderImageToCanvas(image, canvas);\r\n  } else {\r\n    drawAndBlurImageOnCanvas(image, blurAmount, canvas);\r\n  }\r\n  return canvas;\r\n}\r\n\r\nfunction renderImageToCanvas(image: ImageType, canvas: HTMLCanvasElement) {\r\n  const {width, height} = image;\r\n  canvas.width = width;\r\n  canvas.height = height;\r\n  const ctx = canvas.getContext('2d');\r\n\r\n  ctx.drawImage(image, 0, 0, width, height);\r\n}\r\n/**\r\n * Draw an image on a canvas\r\n */\r\nfunction renderImageDataToCanvas(image: ImageData, canvas: HTMLCanvasElement) {\r\n  canvas.width = image.width;\r\n  canvas.height = image.height;\r\n  const ctx = canvas.getContext('2d');\r\n\r\n  ctx.putImageData(image, 0, 0);\r\n}\r\n\r\nfunction renderImageDataToOffScreenCanvas(\r\n    image: ImageData, canvasName: string): HTMLCanvasElement {\r\n  const canvas = ensureOffscreenCanvasCreated(canvasName);\r\n  renderImageDataToCanvas(image, canvas);\r\n\r\n  return canvas;\r\n}\r\n\r\n/**\r\n * Given the output from estimating multi-person segmentation, generates an\r\n * image with foreground and background color at each pixel determined by the\r\n * corresponding binary segmentation value at the pixel from the output.  In\r\n * other words, pixels where there is a person will be colored with foreground\r\n * color and where there is not a person will be colored with background color.\r\n *\r\n * @param personOrPartSegmentation The output from\r\n * `segmentPerson`, `segmentMultiPerson`,\r\n * `segmentPersonParts` or `segmentMultiPersonParts`. They can\r\n * be SemanticPersonSegmentation object, an array of PersonSegmentation object,\r\n * SemanticPartSegmentation object, or an array of PartSegmentation object.\r\n *\r\n * @param foreground Default to {r:0, g:0, b:0, a: 0}. The foreground color\r\n * (r,g,b,a) for visualizing pixels that belong to people.\r\n *\r\n * @param background Default to {r:0, g:0, b:0, a: 255}. The background color\r\n * (r,g,b,a) for visualizing pixels that don't belong to people.\r\n *\r\n * @param drawContour Default to false. Whether to draw the contour around each\r\n * person's segmentation mask or body part mask.\r\n *\r\n * @param foregroundIds Default to [1]. The integer values that represent\r\n * foreground. For person segmentation, 1 is the foreground. For body part\r\n * segmentation, it can be a subset of all body parts ids.\r\n *\r\n * @returns An ImageData with the same width and height of\r\n * all the PersonSegmentation in multiPersonSegmentation, with opacity and\r\n * transparency at each pixel determined by the corresponding binary\r\n * segmentation value at the pixel from the output.\r\n */\r\nexport function toMask(\r\n    personOrPartSegmentation: SemanticPersonSegmentation|\r\n    SemanticPartSegmentation|PersonSegmentation[]|PartSegmentation[],\r\n    foreground: Color = {\r\n      r: 0,\r\n      g: 0,\r\n      b: 0,\r\n      a: 0\r\n    },\r\n    background: Color = {\r\n      r: 0,\r\n      g: 0,\r\n      b: 0,\r\n      a: 255\r\n    },\r\n    drawContour = false, foregroundIds: number[] = [1]): ImageData {\r\n  if (Array.isArray(personOrPartSegmentation) &&\r\n      personOrPartSegmentation.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  let multiPersonOrPartSegmentation:\r\n      Array<SemanticPersonSegmentation|SemanticPartSegmentation|\r\n            PersonSegmentation|PartSegmentation>;\r\n\r\n  if (!Array.isArray(personOrPartSegmentation)) {\r\n    multiPersonOrPartSegmentation = [personOrPartSegmentation];\r\n  } else {\r\n    multiPersonOrPartSegmentation = personOrPartSegmentation;\r\n  }\r\n\r\n  const {width, height} = multiPersonOrPartSegmentation[0];\r\n  const bytes = new Uint8ClampedArray(width * height * 4);\r\n\r\n  function drawStroke(\r\n      bytes: Uint8ClampedArray, row: number, column: number, width: number,\r\n      radius: number, color: Color = {r: 0, g: 255, b: 255, a: 255}) {\r\n    for (let i = -radius; i <= radius; i++) {\r\n      for (let j = -radius; j <= radius; j++) {\r\n        if (i !== 0 && j !== 0) {\r\n          const n = (row + i) * width + (column + j);\r\n          bytes[4 * n + 0] = color.r;\r\n          bytes[4 * n + 1] = color.g;\r\n          bytes[4 * n + 2] = color.b;\r\n          bytes[4 * n + 3] = color.a;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function isSegmentationBoundary(\r\n      segmentationData: Uint8Array|Int32Array,\r\n      row: number,\r\n      column: number,\r\n      width: number,\r\n      foregroundIds: number[] = [1],\r\n      radius = 1,\r\n      ): boolean {\r\n    let numberBackgroundPixels = 0;\r\n    for (let i = -radius; i <= radius; i++) {\r\n      for (let j = -radius; j <= radius; j++) {\r\n        if (i !== 0 && j !== 0) {\r\n          const n = (row + i) * width + (column + j);\r\n          if (!foregroundIds.some(id => id === segmentationData[n])) {\r\n            numberBackgroundPixels += 1;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return numberBackgroundPixels > 0;\r\n  }\r\n\r\n  for (let i = 0; i < height; i += 1) {\r\n    for (let j = 0; j < width; j += 1) {\r\n      const n = i * width + j;\r\n      bytes[4 * n + 0] = background.r;\r\n      bytes[4 * n + 1] = background.g;\r\n      bytes[4 * n + 2] = background.b;\r\n      bytes[4 * n + 3] = background.a;\r\n      for (let k = 0; k < multiPersonOrPartSegmentation.length; k++) {\r\n        if (foregroundIds.some(\r\n                id => id === multiPersonOrPartSegmentation[k].data[n])) {\r\n          bytes[4 * n] = foreground.r;\r\n          bytes[4 * n + 1] = foreground.g;\r\n          bytes[4 * n + 2] = foreground.b;\r\n          bytes[4 * n + 3] = foreground.a;\r\n          const isBoundary = isSegmentationBoundary(\r\n              multiPersonOrPartSegmentation[k].data, i, j, width,\r\n              foregroundIds);\r\n          if (drawContour && i - 1 >= 0 && i + 1 < height && j - 1 >= 0 &&\r\n              j + 1 < width && isBoundary) {\r\n            drawStroke(bytes, i, j, width, 1);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return new ImageData(bytes, width, height);\r\n}\r\n\r\nconst RAINBOW_PART_COLORS: Array<[number, number, number]> = [\r\n  [110, 64, 170], [143, 61, 178], [178, 60, 178], [210, 62, 167],\r\n  [238, 67, 149], [255, 78, 125], [255, 94, 99],  [255, 115, 75],\r\n  [255, 140, 56], [239, 167, 47], [217, 194, 49], [194, 219, 64],\r\n  [175, 240, 91], [135, 245, 87], [96, 247, 96],  [64, 243, 115],\r\n  [40, 234, 141], [28, 219, 169], [26, 199, 194], [33, 176, 213],\r\n  [47, 150, 224], [65, 125, 224], [84, 101, 214], [99, 81, 195]\r\n];\r\n\r\n/**\r\n * Given the output from person body part segmentation (or multi-person\r\n * instance body part segmentation) and an array of colors indexed by part id,\r\n * generates an image with the corresponding color for each part at each pixel,\r\n * and white pixels where there is no part.\r\n *\r\n * @param partSegmentation The output from segmentPersonParts\r\n * or segmentMultiPersonParts. The former is a SemanticPartSegmentation\r\n * object and later is an array of PartSegmentation object.\r\n *\r\n * @param partColors A multi-dimensional array of rgb colors indexed by\r\n * part id.  Must have 24 colors, one for every part.\r\n *\r\n * @returns An ImageData with the same width and height of all the element in\r\n * multiPersonPartSegmentation, with the corresponding color for each part at\r\n * each pixel, and black pixels where there is no part.\r\n */\r\nexport function toColoredPartMask(\r\n    partSegmentation: SemanticPartSegmentation|PartSegmentation[],\r\n    partColors: Array<[number, number, number]> =\r\n        RAINBOW_PART_COLORS): ImageData {\r\n  if (Array.isArray(partSegmentation) && partSegmentation.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  let multiPersonPartSegmentation;\r\n  if (!Array.isArray(partSegmentation)) {\r\n    multiPersonPartSegmentation = [partSegmentation];\r\n  } else {\r\n    multiPersonPartSegmentation = partSegmentation;\r\n  }\r\n  const {width, height} = multiPersonPartSegmentation[0];\r\n  const bytes = new Uint8ClampedArray(width * height * 4);\r\n\r\n  for (let i = 0; i < height * width; ++i) {\r\n    // invert mask.  Invert the segmentation mask.\r\n    const j = i * 4;\r\n    bytes[j + 0] = 255;\r\n    bytes[j + 1] = 255;\r\n    bytes[j + 2] = 255;\r\n    bytes[j + 3] = 255;\r\n    for (let k = 0; k < multiPersonPartSegmentation.length; k++) {\r\n      const partId = multiPersonPartSegmentation[k].data[i];\r\n      if (partId !== -1) {\r\n        const color = partColors[partId];\r\n        if (!color) {\r\n          throw new Error(`No color could be found for part id ${partId}`);\r\n        }\r\n        bytes[j + 0] = color[0];\r\n        bytes[j + 1] = color[1];\r\n        bytes[j + 2] = color[2];\r\n        bytes[j + 3] = 255;\r\n      }\r\n    }\r\n  }\r\n  return new ImageData(bytes, width, height);\r\n}\r\n\r\nconst CANVAS_NAMES = {\r\n  blurred: 'blurred',\r\n  blurredMask: 'blurred-mask',\r\n  mask: 'mask',\r\n  lowresPartMask: 'lowres-part-mask',\r\n};\r\n\r\n/**\r\n * Given an image and a maskImage of type ImageData, draws the image with the\r\n * mask on top of it onto a canvas.\r\n *\r\n * @param canvas The canvas to be drawn onto.\r\n *\r\n * @param image The original image to apply the mask to.\r\n *\r\n * @param maskImage An ImageData containing the mask.  Ideally this should be\r\n * generated by toMask or toColoredPartMask.\r\n *\r\n * @param maskOpacity The opacity of the mask when drawing it on top of the\r\n * image. Defaults to 0.7. Should be a float between 0 and 1.\r\n *\r\n * @param maskBlurAmount How many pixels to blur the mask by. Defaults to 0.\r\n * Should be an integer between 0 and 20.\r\n *\r\n * @param flipHorizontal If the result should be flipped horizontally.  Defaults\r\n * to false.\r\n */\r\nexport function drawMask(\r\n    canvas: HTMLCanvasElement, image: ImageType, maskImage: ImageData|null,\r\n    maskOpacity = 0.7, maskBlurAmount = 0, flipHorizontal = false) {\r\n  const [height, width] = getInputSize(image);\r\n  canvas.width = width;\r\n  canvas.height = height;\r\n\r\n  const ctx = canvas.getContext('2d');\r\n  ctx.save();\r\n  if (flipHorizontal) {\r\n    flipCanvasHorizontal(canvas);\r\n  }\r\n\r\n  ctx.drawImage(image, 0, 0);\r\n\r\n  ctx.globalAlpha = maskOpacity;\r\n  if (maskImage) {\r\n    assertSameDimensions({width, height}, maskImage, 'image', 'mask');\r\n\r\n    const mask = renderImageDataToOffScreenCanvas(maskImage, CANVAS_NAMES.mask);\r\n\r\n    const blurredMask = drawAndBlurImageOnOffScreenCanvas(\r\n        mask, maskBlurAmount, CANVAS_NAMES.blurredMask);\r\n    ctx.drawImage(blurredMask, 0, 0, width, height);\r\n  }\r\n  ctx.restore();\r\n}\r\n\r\n/**\r\n * Given an image and a maskImage of type ImageData, draws the image with the\r\n * pixelated mask on top of it onto a canvas.\r\n *\r\n * @param canvas The canvas to be drawn onto.\r\n *\r\n * @param image The original image to apply the mask to.\r\n *\r\n * @param maskImage An ImageData containing the mask.  Ideally this should be\r\n * generated by toColoredPartMask.\r\n *\r\n * @param maskOpacity The opacity of the mask when drawing it on top of the\r\n * image. Defaults to 0.7. Should be a float between 0 and 1.\r\n *\r\n * @param maskBlurAmount How many pixels to blur the mask by. Defaults to 0.\r\n * Should be an integer between 0 and 20.\r\n *\r\n * @param flipHorizontal If the result should be flipped horizontally.  Defaults\r\n * to false.\r\n *\r\n * @param pixelCellWidth The width of each pixel cell. Default to 10 px.\r\n */\r\nexport function drawPixelatedMask(\r\n    canvas: HTMLCanvasElement, image: ImageType, maskImage: ImageData,\r\n    maskOpacity = 0.7, maskBlurAmount = 0, flipHorizontal = false,\r\n    pixelCellWidth = 10.0) {\r\n  const [height, width] = getInputSize(image);\r\n  assertSameDimensions({width, height}, maskImage, 'image', 'mask');\r\n\r\n  const mask = renderImageDataToOffScreenCanvas(maskImage, CANVAS_NAMES.mask);\r\n  const blurredMask = drawAndBlurImageOnOffScreenCanvas(\r\n      mask, maskBlurAmount, CANVAS_NAMES.blurredMask);\r\n\r\n  canvas.width = blurredMask.width;\r\n  canvas.height = blurredMask.height;\r\n\r\n  const ctx = canvas.getContext('2d');\r\n  ctx.save();\r\n  if (flipHorizontal) {\r\n    flipCanvasHorizontal(canvas);\r\n  }\r\n\r\n  const offscreenCanvas =\r\n      ensureOffscreenCanvasCreated(CANVAS_NAMES.lowresPartMask);\r\n  const offscreenCanvasCtx = offscreenCanvas.getContext('2d');\r\n  offscreenCanvas.width = blurredMask.width * (1.0 / pixelCellWidth);\r\n  offscreenCanvas.height = blurredMask.height * (1.0 / pixelCellWidth);\r\n  offscreenCanvasCtx.drawImage(\r\n      blurredMask, 0, 0, blurredMask.width, blurredMask.height, 0, 0,\r\n      offscreenCanvas.width, offscreenCanvas.height);\r\n  ctx.imageSmoothingEnabled = false;\r\n  ctx.drawImage(\r\n      offscreenCanvas, 0, 0, offscreenCanvas.width, offscreenCanvas.height, 0,\r\n      0, canvas.width, canvas.height);\r\n\r\n  // Draws vertical grid lines that are `pixelCellWidth` apart from each other.\r\n  for (let i = 0; i < offscreenCanvas.width; i++) {\r\n    ctx.beginPath();\r\n    ctx.strokeStyle = '#ffffff';\r\n    ctx.moveTo(pixelCellWidth * i, 0);\r\n    ctx.lineTo(pixelCellWidth * i, canvas.height);\r\n    ctx.stroke();\r\n  }\r\n\r\n  // Draws horizontal grid lines that are `pixelCellWidth` apart from each\r\n  // other.\r\n  for (let i = 0; i < offscreenCanvas.height; i++) {\r\n    ctx.beginPath();\r\n    ctx.strokeStyle = '#ffffff';\r\n    ctx.moveTo(0, pixelCellWidth * i);\r\n    ctx.lineTo(canvas.width, pixelCellWidth * i);\r\n    ctx.stroke();\r\n  }\r\n\r\n  ctx.globalAlpha = 1.0 - maskOpacity;\r\n  ctx.drawImage(image, 0, 0, blurredMask.width, blurredMask.height);\r\n  ctx.restore();\r\n}\r\n\r\nfunction createPersonMask(\r\n    multiPersonSegmentation: PersonSegmentation[]|SemanticPersonSegmentation,\r\n    edgeBlurAmount: number): HTMLCanvasElement {\r\n  const backgroundMaskImage = toMask(\r\n      multiPersonSegmentation, {r: 0, g: 0, b: 0, a: 255},\r\n      {r: 0, g: 0, b: 0, a: 0});\r\n\r\n  const backgroundMask =\r\n      renderImageDataToOffScreenCanvas(backgroundMaskImage, CANVAS_NAMES.mask);\r\n  if (edgeBlurAmount === 0) {\r\n    return backgroundMask;\r\n  } else {\r\n    return drawAndBlurImageOnOffScreenCanvas(\r\n        backgroundMask, edgeBlurAmount, CANVAS_NAMES.blurredMask);\r\n  }\r\n}\r\n\r\n/**\r\n * Given a personSegmentation and an image, draws the image with its background\r\n * blurred onto the canvas.\r\n *\r\n * @param canvas The canvas to draw the background-blurred image onto.\r\n *\r\n * @param image The image to blur the background of and draw.\r\n *\r\n * @param personSegmentation A SemanticPersonSegmentation or an array of\r\n * PersonSegmentation object.\r\n *\r\n * @param backgroundBlurAmount How many pixels in the background blend into each\r\n * other.  Defaults to 3. Should be an integer between 1 and 20.\r\n *\r\n * @param edgeBlurAmount How many pixels to blur on the edge between the person\r\n * and the background by.  Defaults to 3. Should be an integer between 0 and 20.\r\n *\r\n * @param flipHorizontal If the output should be flipped horizontally.  Defaults\r\n * to false.\r\n */\r\nexport function drawBokehEffect(\r\n    canvas: HTMLCanvasElement, image: ImageType,\r\n    multiPersonSegmentation: SemanticPersonSegmentation|PersonSegmentation[],\r\n    backgroundBlurAmount = 3, edgeBlurAmount = 3, flipHorizontal = false) {\r\n  const blurredImage = drawAndBlurImageOnOffScreenCanvas(\r\n      image, backgroundBlurAmount, CANVAS_NAMES.blurred);\r\n  canvas.width = blurredImage.width;\r\n  canvas.height = blurredImage.height;\r\n\r\n  const ctx = canvas.getContext('2d');\r\n\r\n  if (Array.isArray(multiPersonSegmentation) &&\r\n      multiPersonSegmentation.length === 0) {\r\n    ctx.drawImage(blurredImage, 0, 0);\r\n    return;\r\n  }\r\n\r\n  const personMask = createPersonMask(multiPersonSegmentation, edgeBlurAmount);\r\n\r\n  ctx.save();\r\n  if (flipHorizontal) {\r\n    flipCanvasHorizontal(canvas);\r\n  }\r\n  // draw the original image on the final canvas\r\n  const [height, width] = getInputSize(image);\r\n  ctx.drawImage(image, 0, 0, width, height);\r\n\r\n  // \"destination-in\" - \"The existing canvas content is kept where both the\r\n  // new shape and existing canvas content overlap. Everything else is made\r\n  // transparent.\"\r\n  // crop what's not the person using the mask from the original image\r\n  drawWithCompositing(ctx, personMask, 'destination-in');\r\n  // \"destination-over\" - \"The existing canvas content is kept where both the\r\n  // new shape and existing canvas content overlap. Everything else is made\r\n  // transparent.\"\r\n  // draw the blurred background on top of the original image where it doesn't\r\n  // overlap.\r\n  drawWithCompositing(ctx, blurredImage, 'destination-over');\r\n  ctx.restore();\r\n}\r\n\r\nfunction createBodyPartMask(\r\n    multiPersonPartSegmentation: SemanticPartSegmentation|PartSegmentation[],\r\n    bodyPartIdsToMask: number[], edgeBlurAmount: number): HTMLCanvasElement {\r\n  const backgroundMaskImage = toMask(\r\n      multiPersonPartSegmentation, {r: 0, g: 0, b: 0, a: 0},\r\n      {r: 0, g: 0, b: 0, a: 255}, true, bodyPartIdsToMask);\r\n\r\n  const backgroundMask =\r\n      renderImageDataToOffScreenCanvas(backgroundMaskImage, CANVAS_NAMES.mask);\r\n  if (edgeBlurAmount === 0) {\r\n    return backgroundMask;\r\n  } else {\r\n    return drawAndBlurImageOnOffScreenCanvas(\r\n        backgroundMask, edgeBlurAmount, CANVAS_NAMES.blurredMask);\r\n  }\r\n}\r\n\r\n/**\r\n * Given a personSegmentation and an image, draws the image with its background\r\n * blurred onto the canvas.\r\n *\r\n * @param canvas The canvas to draw the background-blurred image onto.\r\n *\r\n * @param image The image to blur the background of and draw.\r\n *\r\n * @param partSegmentation A SemanticPartSegmentation or an array of\r\n * PartSegmentation object.\r\n *\r\n * @param bodyPartIdsToBlur Default to [0, 1] (left-face and right-face). An\r\n * array of body part ids to blur. Each must be one of the 24 body part ids.\r\n *\r\n * @param backgroundBlurAmount How many pixels in the background blend into each\r\n * other.  Defaults to 3. Should be an integer between 1 and 20.\r\n *\r\n * @param edgeBlurAmount How many pixels to blur on the edge between the person\r\n * and the background by.  Defaults to 3. Should be an integer between 0 and 20.\r\n *\r\n * @param flipHorizontal If the output should be flipped horizontally.  Defaults\r\n * to false.\r\n */\r\nexport function blurBodyPart(\r\n    canvas: HTMLCanvasElement, image: ImageType,\r\n    partSegmentation: SemanticPartSegmentation|PartSegmentation[],\r\n    bodyPartIdsToBlur = [0, 1], backgroundBlurAmount = 3, edgeBlurAmount = 3,\r\n    flipHorizontal = false) {\r\n  const blurredImage = drawAndBlurImageOnOffScreenCanvas(\r\n      image, backgroundBlurAmount, CANVAS_NAMES.blurred);\r\n  canvas.width = blurredImage.width;\r\n  canvas.height = blurredImage.height;\r\n\r\n  const ctx = canvas.getContext('2d');\r\n\r\n  if (Array.isArray(partSegmentation) && partSegmentation.length === 0) {\r\n    ctx.drawImage(blurredImage, 0, 0);\r\n    return;\r\n  }\r\n  const bodyPartMask =\r\n      createBodyPartMask(partSegmentation, bodyPartIdsToBlur, edgeBlurAmount);\r\n\r\n  ctx.save();\r\n  if (flipHorizontal) {\r\n    flipCanvasHorizontal(canvas);\r\n  }\r\n  // draw the original image on the final canvas\r\n  const [height, width] = getInputSize(image);\r\n  ctx.drawImage(image, 0, 0, width, height);\r\n\r\n  // \"destination-in\" - \"The existing canvas content is kept where both the\r\n  // new shape and existing canvas content overlap. Everything else is made\r\n  // transparent.\"\r\n  // crop what's not the person using the mask from the original image\r\n  drawWithCompositing(ctx, bodyPartMask, 'destination-in');\r\n  // \"destination-over\" - \"The existing canvas content is kept where both the\r\n  // new shape and existing canvas content overlap. Everything else is made\r\n  // transparent.\"\r\n  // draw the blurred background on top of the original image where it doesn't\r\n  // overlap.\r\n  drawWithCompositing(ctx, blurredImage, 'destination-over');\r\n  ctx.restore();\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\n// method copied from bGlur in https://codepen.io/zhaojun/pen/zZmRQe\r\nexport function cpuBlur(\r\n    canvas: HTMLCanvasElement,\r\n    image: HTMLImageElement|HTMLVideoElement|HTMLCanvasElement, blur: number) {\r\n  const ctx = canvas.getContext('2d');\r\n\r\n  let sum = 0;\r\n  const delta = 5;\r\n  const alphaLeft = 1 / (2 * Math.PI * delta * delta);\r\n  const step = blur < 3 ? 1 : 2;\r\n  for (let y = -blur; y <= blur; y += step) {\r\n    for (let x = -blur; x <= blur; x += step) {\r\n      const weight =\r\n          alphaLeft * Math.exp(-(x * x + y * y) / (2 * delta * delta));\r\n      sum += weight;\r\n    }\r\n  }\r\n  for (let y = -blur; y <= blur; y += step) {\r\n    for (let x = -blur; x <= blur; x += step) {\r\n      ctx.globalAlpha = alphaLeft *\r\n          Math.exp(-(x * x + y * y) / (2 * delta * delta)) / sum * blur;\r\n      ctx.drawImage(image, x, y);\r\n    }\r\n  }\r\n  ctx.globalAlpha = 1;\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * =============================================================================\r\n */\r\n\r\nexport const PART_CHANNELS: string[] = [\r\n  'left_face',\r\n  'right_face',\r\n  'left_upper_arm_front',\r\n  'left_upper_arm_back',\r\n  'right_upper_arm_front',\r\n  'right_upper_arm_back',\r\n  'left_lower_arm_front',\r\n  'left_lower_arm_back',\r\n  'right_lower_arm_front',\r\n  'right_lower_arm_back',\r\n  'left_hand',\r\n  'right_hand',\r\n  'torso_front',\r\n  'torso_back',\r\n  'left_upper_leg_front',\r\n  'left_upper_leg_back',\r\n  'right_upper_leg_front',\r\n  'right_upper_leg_back',\r\n  'left_lower_leg_front',\r\n  'left_lower_leg_back',\r\n  'right_lower_leg_front',\r\n  'right_lower_leg_back',\r\n  'left_feet',\r\n  'right_feet'\r\n];\r\n","/** @license See the LICENSE file. */\r\n\r\n// This code is auto-generated, do not modify this file!\r\nconst version = '2.0.5';\r\nexport {version};\r\n"],"names":["toFlattenedOneHotPartMap","partHeatmapScores","numParts","shape","partMapFlattened","argMax","reshape","tf.oneHot","toMaskTensor","segmentScores","threshold","tf.tidy","greater","tf.scalar","toInt","model","outputStride","this","inputShape","inputs","tf.util","assert","BaseModel","input","asBatch","_this","preprocessInput","toFloat","expandDims","results3d","predict","map","y","squeeze","namedResults","nameOutputResults","heatmapScores","heatmap","sigmoid","offsets","displacementFwd","displacementBwd","segmentation","partHeatmaps","longOffsets","partOffsets","dispose","tslib_1.__extends","MobileNet","tf.div","sub","results","PART_NAMES","NUM_KEYPOINTS","length","PART_IDS","reduce","result","jointName","i","_a","jointNameA","jointNameB","getScale","_b","padding","height","width","inputResolutionY","inputResolutionX","padT","padB","getOffsetPoint","x","keypoint","get","getImageCoords","part","heatmapX","heatmapY","clamp","a","min","max","addVectors","b","computeDistance","embedding","pose","minPartScore","distance","numKpt","p","keypoints","score","Math","position","Infinity","getEmbedding","location","keypointIndex","convertToPosition","outputResolutionX","refineSteps","newLocation","nn","dy","dx","t","newPos","nn_1","matchEmbeddingToInstance","poses","numKptForMatching","_c","stride","padL","scaleX","scaleY","embed","pair","round","convertToPositionInOuput","keypointsIndex","push","kMin","kMinDist","k","dist","getOutputResolution","decodeMultipleMasksWebGl","posesAboveScore","minKptScore","maxNumPeople","inHeight","inWidth","origHeight","origWidth","outHeight","outWidth","shapedLongOffsets","poseVals","Float32Array","fill","poseOffset","kp","offset","_d","posesTensor","tf.tensor","program","variableNames","outputShape","userCode","tf.backend","compileAndRun","isWebGlBackend","getBackend","decodePersonInstanceMasks","minPoseScore","minKeypointScore","filter","personSegmentations","masksTensor","_","equal","toPersonKSegmentation","Promise","all","mask","data","personSegmentationsData","forEach","segmentationsData","longOffsetsData","dataArrays","Uint8Array","j","n","decodeMultipleMasksCPU","decodePersonInstancePartMasks","partSegmentation","partSegmentations","bodyParts","mul","add","toPersonKPartSegmentation","partSegmentationsByPersonData","partSegmentaionData","partSegmentaion","Int32Array","decodeMultiplePartMasksCPU","half","floor","maxSize","getElementValue","priorityQueue","Array","numberOfElements","MaxHeap","swim","exchange","sink","slice","less","getValueAt","scoreIsMaximumInLocalWindow","keypointId","localMaximumRadius","scores","localMaximum","yStart","yEnd","yCurrent","xStart","xEnd","xCurrent","parentChildrenTuples","parentJoinName","childJoinName","parentToChildEdges","childToParentEdges","getStridedIndexNearPoint","point","traverseToTargetKeypoint","edgeId","sourceKeypoint","targetKeypointId","scoresBuffer","displacements","offsetRefineStep","displacement","numEdges","getDisplacement","targetKeypoint","targetKeypointIndices","offsetPoint","targetKeyPointIndices","decodePose","root","displacementsFwd","displacementsBwd","instanceKeypoints","rootPart","rootScore","rootPoint","id","edge","sourceKeypointId","withinNmsRadiusOfCorrespondingPoint","squaredNmsRadius","some","y1","x1","y2","x2","correspondingKeypoint","getInstanceScore","existingPoses","kLocalMaximumRadius","decodeMultiplePoses","offsetsBuffer","displacementsFwdBuffer","displacementsBwdBuffer","maxPoseDetections","scoreThreshold","nmsRadius","queue","numKeypoints","enqueue","buildPartWithScoreQueue","empty","dequeue","imageNetMean","ResNet","RESNET50_BASE_URL","MOBILENET_BASE_URL","getInputSize","HTMLCanvasElement","HTMLImageElement","offsetHeight","offsetWidth","Error","getSizeFromImageLikeElement","ImageData","HTMLVideoElement","videoHeight","videoWidth","getSizeFromVideoElement","tf.Tensor","toValidInputResolution","inputResolution","resolution","isValidInputResolution","INTERNAL_RESOLUTION_STRING_OPTIONS","low","medium","high","full","INTERNAL_RESOLUTION_PERCENTAGES","MIN_INTERNAL_RESOLUTION","MAX_INTERNAL_RESOLUTION","toInputResolutionHeightAndWidth","internalResolution","inputHeight","inputWidth","internalResolutionPercentage","Object","values","join","toInternalResolutionPercentage","scaleAndCropToInputTensorShape","tensor","applySigmoidActivation","inputTensorHeight","inputTensorWidth","resizedAndPaddedHeight","resizedAndPaddedWidth","_e","padR","inResizedAndPadded","resizeBilinear","resizedAndPadded","originalHeight","originalWidth","batchedImage","tf.image","cropAndResize","removePaddingAndResizeBack","padAndResizeTo","targetH","targetW","targetAspect","resized","imageTensor","tf.browser","fromPixels","toInputTensor","tf.pad3d","top","left","right","bottom","toTensorBuffers3D","tensors","buffer","flipPoseHorizontal","imageWidth","scaleAndFlipPoses","flipHorizontal","inputResolutionHeight","inputResolutionWidth","scaledPoses","offsetY","offsetX","scalePose","scalePoses","flipPosesHorizontal","MOBILENET_V1_CONFIG","architecture","quantBytes","multiplier","VALID_ARCHITECTURE","VALID_STRIDE","MobileNetV1","ResNet50","VALID_MULTIPLIER","VALID_QUANT_BYTES","PERSON_INFERENCE_CONFIG","segmentationThreshold","maxDetections","MULTI_PERSON_INSTANCE_INFERENCE_CONFIG","validatePersonInferenceConfig","config","validateMultiPersonInstanceInferenceConfig","net","baseModel","BodyPix","segmentLogits","partHeatmapLogits","internalResolutionHeightAndWidth","segmentationScores","segmentPersonActivation","tensorBuffers","scoresBuf","offsetsBuf","displacementsFwdBuf","displacementsBwdBuf","allPoses","scaledLongOffsets","heatmapScoresRaw","offsetsRaw","displacementFwdRaw","displacementBwdRaw","instanceMasks","segmentationMask","partMapHeight","partMapWidth","image","flattenedMap","partNumbers","tf.range","partMapShiftedUpForClipping","matMul","segmentPersonPartsActivation","scaledSegmentScores","scaledPartSegmentationScores","decodeOnlyPartSegmentation","loadMobileNet","tf","url","toStr","1","0.75","0.5","graphJson","mobileNetSavedModel","tfconv.loadGraphModel","modelUrl","graphModel","mobilenet","loadResNet","resNet50SavedModel","resnet","offScreenCanvases","assertSameDimensions","nameA","nameB","widthA","heightA","widthB","heightB","flipCanvasHorizontal","canvas","ctx","getContext","scale","translate","drawWithCompositing","compositOperation","globalCompositeOperation","drawImage","ensureOffscreenCanvasCreated","document","createElement","drawAndBlurImageOnCanvas","blurAmount","clearRect","save","test","navigator","userAgent","blur","sum","alphaLeft","PI","step","exp","globalAlpha","cpuBlur","restore","drawAndBlurImageOnOffScreenCanvas","offscreenCanvasName","renderImageToCanvas","renderImageDataToOffScreenCanvas","canvasName","putImageData","renderImageDataToCanvas","toMask","personOrPartSegmentation","foreground","background","drawContour","foregroundIds","r","g","isArray","multiPersonOrPartSegmentation","bytes","Uint8ClampedArray","drawStroke","row","column","radius","color","isSegmentationBoundary","segmentationData","numberBackgroundPixels","n_1","isBoundary","RAINBOW_PART_COLORS","CANVAS_NAMES","blurred","blurredMask","lowresPartMask","indexOf","validateModelConfig","bodyPartIdsToBlur","backgroundBlurAmount","edgeBlurAmount","blurredImage","bodyPartMask","multiPersonPartSegmentation","bodyPartIdsToMask","backgroundMask","createBodyPartMask","multiPersonSegmentation","personMask","createPersonMask","maskImage","maskOpacity","maskBlurAmount","pixelCellWidth","offscreenCanvas","offscreenCanvasCtx","imageSmoothingEnabled","beginPath","strokeStyle","moveTo","lineTo","stroke","partColors","partId","resizeW","resizeH","aspect","padHeight","ceil","padWidth","reverse","paddedBy"],"mappings":"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"}